// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/predicate"
	"github.com/thang1834/go-goss/ent/gen/product"
	"github.com/thang1834/go-goss/ent/gen/wishlist"
	"github.com/thang1834/go-goss/ent/gen/wishlistitem"
)

// WishlistItemQuery is the builder for querying WishlistItem entities.
type WishlistItemQuery struct {
	config
	ctx          *QueryContext
	order        []wishlistitem.OrderOption
	inters       []Interceptor
	predicates   []predicate.WishlistItem
	withWishlist *WishlistQuery
	withProduct  *ProductQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WishlistItemQuery builder.
func (wiq *WishlistItemQuery) Where(ps ...predicate.WishlistItem) *WishlistItemQuery {
	wiq.predicates = append(wiq.predicates, ps...)
	return wiq
}

// Limit the number of records to be returned by this query.
func (wiq *WishlistItemQuery) Limit(limit int) *WishlistItemQuery {
	wiq.ctx.Limit = &limit
	return wiq
}

// Offset to start from.
func (wiq *WishlistItemQuery) Offset(offset int) *WishlistItemQuery {
	wiq.ctx.Offset = &offset
	return wiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wiq *WishlistItemQuery) Unique(unique bool) *WishlistItemQuery {
	wiq.ctx.Unique = &unique
	return wiq
}

// Order specifies how the records should be ordered.
func (wiq *WishlistItemQuery) Order(o ...wishlistitem.OrderOption) *WishlistItemQuery {
	wiq.order = append(wiq.order, o...)
	return wiq
}

// QueryWishlist chains the current query on the "wishlist" edge.
func (wiq *WishlistItemQuery) QueryWishlist() *WishlistQuery {
	query := (&WishlistClient{config: wiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(wishlistitem.Table, wishlistitem.FieldID, selector),
			sqlgraph.To(wishlist.Table, wishlist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, wishlistitem.WishlistTable, wishlistitem.WishlistColumn),
		)
		fromU = sqlgraph.SetNeighbors(wiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProduct chains the current query on the "product" edge.
func (wiq *WishlistItemQuery) QueryProduct() *ProductQuery {
	query := (&ProductClient{config: wiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(wishlistitem.Table, wishlistitem.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, wishlistitem.ProductTable, wishlistitem.ProductColumn),
		)
		fromU = sqlgraph.SetNeighbors(wiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WishlistItem entity from the query.
// Returns a *NotFoundError when no WishlistItem was found.
func (wiq *WishlistItemQuery) First(ctx context.Context) (*WishlistItem, error) {
	nodes, err := wiq.Limit(1).All(setContextOp(ctx, wiq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{wishlistitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wiq *WishlistItemQuery) FirstX(ctx context.Context) *WishlistItem {
	node, err := wiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WishlistItem ID from the query.
// Returns a *NotFoundError when no WishlistItem ID was found.
func (wiq *WishlistItemQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wiq.Limit(1).IDs(setContextOp(ctx, wiq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{wishlistitem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wiq *WishlistItemQuery) FirstIDX(ctx context.Context) int {
	id, err := wiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WishlistItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WishlistItem entity is found.
// Returns a *NotFoundError when no WishlistItem entities are found.
func (wiq *WishlistItemQuery) Only(ctx context.Context) (*WishlistItem, error) {
	nodes, err := wiq.Limit(2).All(setContextOp(ctx, wiq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{wishlistitem.Label}
	default:
		return nil, &NotSingularError{wishlistitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wiq *WishlistItemQuery) OnlyX(ctx context.Context) *WishlistItem {
	node, err := wiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WishlistItem ID in the query.
// Returns a *NotSingularError when more than one WishlistItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (wiq *WishlistItemQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wiq.Limit(2).IDs(setContextOp(ctx, wiq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{wishlistitem.Label}
	default:
		err = &NotSingularError{wishlistitem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wiq *WishlistItemQuery) OnlyIDX(ctx context.Context) int {
	id, err := wiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WishlistItems.
func (wiq *WishlistItemQuery) All(ctx context.Context) ([]*WishlistItem, error) {
	ctx = setContextOp(ctx, wiq.ctx, ent.OpQueryAll)
	if err := wiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WishlistItem, *WishlistItemQuery]()
	return withInterceptors[[]*WishlistItem](ctx, wiq, qr, wiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wiq *WishlistItemQuery) AllX(ctx context.Context) []*WishlistItem {
	nodes, err := wiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WishlistItem IDs.
func (wiq *WishlistItemQuery) IDs(ctx context.Context) (ids []int, err error) {
	if wiq.ctx.Unique == nil && wiq.path != nil {
		wiq.Unique(true)
	}
	ctx = setContextOp(ctx, wiq.ctx, ent.OpQueryIDs)
	if err = wiq.Select(wishlistitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wiq *WishlistItemQuery) IDsX(ctx context.Context) []int {
	ids, err := wiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wiq *WishlistItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wiq.ctx, ent.OpQueryCount)
	if err := wiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wiq, querierCount[*WishlistItemQuery](), wiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wiq *WishlistItemQuery) CountX(ctx context.Context) int {
	count, err := wiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wiq *WishlistItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wiq.ctx, ent.OpQueryExist)
	switch _, err := wiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("gen: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wiq *WishlistItemQuery) ExistX(ctx context.Context) bool {
	exist, err := wiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WishlistItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wiq *WishlistItemQuery) Clone() *WishlistItemQuery {
	if wiq == nil {
		return nil
	}
	return &WishlistItemQuery{
		config:       wiq.config,
		ctx:          wiq.ctx.Clone(),
		order:        append([]wishlistitem.OrderOption{}, wiq.order...),
		inters:       append([]Interceptor{}, wiq.inters...),
		predicates:   append([]predicate.WishlistItem{}, wiq.predicates...),
		withWishlist: wiq.withWishlist.Clone(),
		withProduct:  wiq.withProduct.Clone(),
		// clone intermediate query.
		sql:  wiq.sql.Clone(),
		path: wiq.path,
	}
}

// WithWishlist tells the query-builder to eager-load the nodes that are connected to
// the "wishlist" edge. The optional arguments are used to configure the query builder of the edge.
func (wiq *WishlistItemQuery) WithWishlist(opts ...func(*WishlistQuery)) *WishlistItemQuery {
	query := (&WishlistClient{config: wiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wiq.withWishlist = query
	return wiq
}

// WithProduct tells the query-builder to eager-load the nodes that are connected to
// the "product" edge. The optional arguments are used to configure the query builder of the edge.
func (wiq *WishlistItemQuery) WithProduct(opts ...func(*ProductQuery)) *WishlistItemQuery {
	query := (&ProductClient{config: wiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wiq.withProduct = query
	return wiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AddedAt time.Time `json:"added_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WishlistItem.Query().
//		GroupBy(wishlistitem.FieldAddedAt).
//		Aggregate(gen.Count()).
//		Scan(ctx, &v)
func (wiq *WishlistItemQuery) GroupBy(field string, fields ...string) *WishlistItemGroupBy {
	wiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WishlistItemGroupBy{build: wiq}
	grbuild.flds = &wiq.ctx.Fields
	grbuild.label = wishlistitem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AddedAt time.Time `json:"added_at,omitempty"`
//	}
//
//	client.WishlistItem.Query().
//		Select(wishlistitem.FieldAddedAt).
//		Scan(ctx, &v)
func (wiq *WishlistItemQuery) Select(fields ...string) *WishlistItemSelect {
	wiq.ctx.Fields = append(wiq.ctx.Fields, fields...)
	sbuild := &WishlistItemSelect{WishlistItemQuery: wiq}
	sbuild.label = wishlistitem.Label
	sbuild.flds, sbuild.scan = &wiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WishlistItemSelect configured with the given aggregations.
func (wiq *WishlistItemQuery) Aggregate(fns ...AggregateFunc) *WishlistItemSelect {
	return wiq.Select().Aggregate(fns...)
}

func (wiq *WishlistItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wiq.inters {
		if inter == nil {
			return fmt.Errorf("gen: uninitialized interceptor (forgotten import gen/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wiq); err != nil {
				return err
			}
		}
	}
	for _, f := range wiq.ctx.Fields {
		if !wishlistitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
		}
	}
	if wiq.path != nil {
		prev, err := wiq.path(ctx)
		if err != nil {
			return err
		}
		wiq.sql = prev
	}
	return nil
}

func (wiq *WishlistItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WishlistItem, error) {
	var (
		nodes       = []*WishlistItem{}
		withFKs     = wiq.withFKs
		_spec       = wiq.querySpec()
		loadedTypes = [2]bool{
			wiq.withWishlist != nil,
			wiq.withProduct != nil,
		}
	)
	if wiq.withWishlist != nil || wiq.withProduct != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, wishlistitem.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WishlistItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WishlistItem{config: wiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wiq.withWishlist; query != nil {
		if err := wiq.loadWishlist(ctx, query, nodes, nil,
			func(n *WishlistItem, e *Wishlist) { n.Edges.Wishlist = e }); err != nil {
			return nil, err
		}
	}
	if query := wiq.withProduct; query != nil {
		if err := wiq.loadProduct(ctx, query, nodes, nil,
			func(n *WishlistItem, e *Product) { n.Edges.Product = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wiq *WishlistItemQuery) loadWishlist(ctx context.Context, query *WishlistQuery, nodes []*WishlistItem, init func(*WishlistItem), assign func(*WishlistItem, *Wishlist)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*WishlistItem)
	for i := range nodes {
		if nodes[i].wishlist_items == nil {
			continue
		}
		fk := *nodes[i].wishlist_items
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(wishlist.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "wishlist_items" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wiq *WishlistItemQuery) loadProduct(ctx context.Context, query *ProductQuery, nodes []*WishlistItem, init func(*WishlistItem), assign func(*WishlistItem, *Product)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*WishlistItem)
	for i := range nodes {
		if nodes[i].product_wishlist_items == nil {
			continue
		}
		fk := *nodes[i].product_wishlist_items
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(product.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_wishlist_items" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (wiq *WishlistItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wiq.querySpec()
	_spec.Node.Columns = wiq.ctx.Fields
	if len(wiq.ctx.Fields) > 0 {
		_spec.Unique = wiq.ctx.Unique != nil && *wiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wiq.driver, _spec)
}

func (wiq *WishlistItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(wishlistitem.Table, wishlistitem.Columns, sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt))
	_spec.From = wiq.sql
	if unique := wiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wiq.path != nil {
		_spec.Unique = true
	}
	if fields := wiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wishlistitem.FieldID)
		for i := range fields {
			if fields[i] != wishlistitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := wiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wiq *WishlistItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wiq.driver.Dialect())
	t1 := builder.Table(wishlistitem.Table)
	columns := wiq.ctx.Fields
	if len(columns) == 0 {
		columns = wishlistitem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wiq.sql != nil {
		selector = wiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wiq.ctx.Unique != nil && *wiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wiq.predicates {
		p(selector)
	}
	for _, p := range wiq.order {
		p(selector)
	}
	if offset := wiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WishlistItemGroupBy is the group-by builder for WishlistItem entities.
type WishlistItemGroupBy struct {
	selector
	build *WishlistItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wigb *WishlistItemGroupBy) Aggregate(fns ...AggregateFunc) *WishlistItemGroupBy {
	wigb.fns = append(wigb.fns, fns...)
	return wigb
}

// Scan applies the selector query and scans the result into the given value.
func (wigb *WishlistItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wigb.build.ctx, ent.OpQueryGroupBy)
	if err := wigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WishlistItemQuery, *WishlistItemGroupBy](ctx, wigb.build, wigb, wigb.build.inters, v)
}

func (wigb *WishlistItemGroupBy) sqlScan(ctx context.Context, root *WishlistItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wigb.fns))
	for _, fn := range wigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wigb.flds)+len(wigb.fns))
		for _, f := range *wigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WishlistItemSelect is the builder for selecting fields of WishlistItem entities.
type WishlistItemSelect struct {
	*WishlistItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wis *WishlistItemSelect) Aggregate(fns ...AggregateFunc) *WishlistItemSelect {
	wis.fns = append(wis.fns, fns...)
	return wis
}

// Scan applies the selector query and scans the result into the given value.
func (wis *WishlistItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wis.ctx, ent.OpQuerySelect)
	if err := wis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WishlistItemQuery, *WishlistItemSelect](ctx, wis.WishlistItemQuery, wis, wis.inters, v)
}

func (wis *WishlistItemSelect) sqlScan(ctx context.Context, root *WishlistItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wis.fns))
	for _, fn := range wis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
