// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/thang1834/go-goss/ent/gen/discount"
)

// Discount is the model entity for the Discount schema.
type Discount struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// DiscountType holds the value of the "discount_type" field.
	DiscountType string `json:"discount_type,omitempty"`
	// DiscountValue holds the value of the "discount_value" field.
	DiscountValue float64 `json:"discount_value,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// UsageLimit holds the value of the "usage_limit" field.
	UsageLimit int `json:"usage_limit,omitempty"`
	// UsageCount holds the value of the "usage_count" field.
	UsageCount int `json:"usage_count,omitempty"`
	// MinOrderValue holds the value of the "min_order_value" field.
	MinOrderValue int `json:"min_order_value,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscountQuery when eager-loading is set.
	Edges        DiscountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DiscountEdges holds the relations/edges for other nodes in the graph.
type DiscountEdges struct {
	// Products holds the value of the products edge.
	Products []*DiscountProduct `json:"products,omitempty"`
	// Categories holds the value of the categories edge.
	Categories []*DiscountCategory `json:"categories,omitempty"`
	// UserVouchers holds the value of the user_vouchers edge.
	UserVouchers []*UserVoucher `json:"user_vouchers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e DiscountEdges) ProductsOrErr() ([]*DiscountProduct, error) {
	if e.loadedTypes[0] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// CategoriesOrErr returns the Categories value or an error if the edge
// was not loaded in eager-loading.
func (e DiscountEdges) CategoriesOrErr() ([]*DiscountCategory, error) {
	if e.loadedTypes[1] {
		return e.Categories, nil
	}
	return nil, &NotLoadedError{edge: "categories"}
}

// UserVouchersOrErr returns the UserVouchers value or an error if the edge
// was not loaded in eager-loading.
func (e DiscountEdges) UserVouchersOrErr() ([]*UserVoucher, error) {
	if e.loadedTypes[2] {
		return e.UserVouchers, nil
	}
	return nil, &NotLoadedError{edge: "user_vouchers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Discount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case discount.FieldDiscountValue:
			values[i] = new(sql.NullFloat64)
		case discount.FieldID, discount.FieldUsageLimit, discount.FieldUsageCount, discount.FieldMinOrderValue:
			values[i] = new(sql.NullInt64)
		case discount.FieldCode, discount.FieldDescription, discount.FieldDiscountType:
			values[i] = new(sql.NullString)
		case discount.FieldStartDate, discount.FieldEndDate, discount.FieldCreatedAt, discount.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Discount fields.
func (d *Discount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = uint64(value.Int64)
		case discount.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				d.Code = value.String
			}
		case discount.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				d.Description = value.String
			}
		case discount.FieldDiscountType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discount_type", values[i])
			} else if value.Valid {
				d.DiscountType = value.String
			}
		case discount.FieldDiscountValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_value", values[i])
			} else if value.Valid {
				d.DiscountValue = value.Float64
			}
		case discount.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				d.StartDate = value.Time
			}
		case discount.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				d.EndDate = value.Time
			}
		case discount.FieldUsageLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_limit", values[i])
			} else if value.Valid {
				d.UsageLimit = int(value.Int64)
			}
		case discount.FieldUsageCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_count", values[i])
			} else if value.Valid {
				d.UsageCount = int(value.Int64)
			}
		case discount.FieldMinOrderValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_order_value", values[i])
			} else if value.Valid {
				d.MinOrderValue = int(value.Int64)
			}
		case discount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case discount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Discount.
// This includes values selected through modifiers, order, etc.
func (d *Discount) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryProducts queries the "products" edge of the Discount entity.
func (d *Discount) QueryProducts() *DiscountProductQuery {
	return NewDiscountClient(d.config).QueryProducts(d)
}

// QueryCategories queries the "categories" edge of the Discount entity.
func (d *Discount) QueryCategories() *DiscountCategoryQuery {
	return NewDiscountClient(d.config).QueryCategories(d)
}

// QueryUserVouchers queries the "user_vouchers" edge of the Discount entity.
func (d *Discount) QueryUserVouchers() *UserVoucherQuery {
	return NewDiscountClient(d.config).QueryUserVouchers(d)
}

// Update returns a builder for updating this Discount.
// Note that you need to call Discount.Unwrap() before calling this method if this Discount
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Discount) Update() *DiscountUpdateOne {
	return NewDiscountClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Discount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Discount) Unwrap() *Discount {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("gen: Discount is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Discount) String() string {
	var builder strings.Builder
	builder.WriteString("Discount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("code=")
	builder.WriteString(d.Code)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(d.Description)
	builder.WriteString(", ")
	builder.WriteString("discount_type=")
	builder.WriteString(d.DiscountType)
	builder.WriteString(", ")
	builder.WriteString("discount_value=")
	builder.WriteString(fmt.Sprintf("%v", d.DiscountValue))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(d.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(d.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("usage_limit=")
	builder.WriteString(fmt.Sprintf("%v", d.UsageLimit))
	builder.WriteString(", ")
	builder.WriteString("usage_count=")
	builder.WriteString(fmt.Sprintf("%v", d.UsageCount))
	builder.WriteString(", ")
	builder.WriteString("min_order_value=")
	builder.WriteString(fmt.Sprintf("%v", d.MinOrderValue))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Discounts is a parsable slice of Discount.
type Discounts []*Discount
