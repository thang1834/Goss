// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/thang1834/go-goss/ent/gen"
)

// The CartFunc type is an adapter to allow the use of ordinary
// function as Cart mutator.
type CartFunc func(context.Context, *gen.CartMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f CartFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.CartMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.CartMutation", m)
}

// The CartItemFunc type is an adapter to allow the use of ordinary
// function as CartItem mutator.
type CartItemFunc func(context.Context, *gen.CartItemMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f CartItemFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.CartItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.CartItemMutation", m)
}

// The CategoryFunc type is an adapter to allow the use of ordinary
// function as Category mutator.
type CategoryFunc func(context.Context, *gen.CategoryMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f CategoryFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.CategoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.CategoryMutation", m)
}

// The DiscountFunc type is an adapter to allow the use of ordinary
// function as Discount mutator.
type DiscountFunc func(context.Context, *gen.DiscountMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f DiscountFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.DiscountMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.DiscountMutation", m)
}

// The DiscountCategoryFunc type is an adapter to allow the use of ordinary
// function as DiscountCategory mutator.
type DiscountCategoryFunc func(context.Context, *gen.DiscountCategoryMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f DiscountCategoryFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.DiscountCategoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.DiscountCategoryMutation", m)
}

// The DiscountProductFunc type is an adapter to allow the use of ordinary
// function as DiscountProduct mutator.
type DiscountProductFunc func(context.Context, *gen.DiscountProductMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f DiscountProductFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.DiscountProductMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.DiscountProductMutation", m)
}

// The OrderFunc type is an adapter to allow the use of ordinary
// function as Order mutator.
type OrderFunc func(context.Context, *gen.OrderMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f OrderFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.OrderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.OrderMutation", m)
}

// The OrderItemFunc type is an adapter to allow the use of ordinary
// function as OrderItem mutator.
type OrderItemFunc func(context.Context, *gen.OrderItemMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f OrderItemFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.OrderItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.OrderItemMutation", m)
}

// The PaymentFunc type is an adapter to allow the use of ordinary
// function as Payment mutator.
type PaymentFunc func(context.Context, *gen.PaymentMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f PaymentFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.PaymentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.PaymentMutation", m)
}

// The PermissionFunc type is an adapter to allow the use of ordinary
// function as Permission mutator.
type PermissionFunc func(context.Context, *gen.PermissionMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f PermissionFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.PermissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.PermissionMutation", m)
}

// The ProductFunc type is an adapter to allow the use of ordinary
// function as Product mutator.
type ProductFunc func(context.Context, *gen.ProductMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f ProductFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.ProductMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.ProductMutation", m)
}

// The ProductImageFunc type is an adapter to allow the use of ordinary
// function as ProductImage mutator.
type ProductImageFunc func(context.Context, *gen.ProductImageMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f ProductImageFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.ProductImageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.ProductImageMutation", m)
}

// The ReviewFunc type is an adapter to allow the use of ordinary
// function as Review mutator.
type ReviewFunc func(context.Context, *gen.ReviewMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f ReviewFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.ReviewMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.ReviewMutation", m)
}

// The RoleFunc type is an adapter to allow the use of ordinary
// function as Role mutator.
type RoleFunc func(context.Context, *gen.RoleMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f RoleFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.RoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.RoleMutation", m)
}

// The RolePermissionFunc type is an adapter to allow the use of ordinary
// function as RolePermission mutator.
type RolePermissionFunc func(context.Context, *gen.RolePermissionMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f RolePermissionFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.RolePermissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.RolePermissionMutation", m)
}

// The SessionFunc type is an adapter to allow the use of ordinary
// function as Session mutator.
type SessionFunc func(context.Context, *gen.SessionMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f SessionFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.SessionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.SessionMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *gen.UserMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.UserMutation", m)
}

// The UserPermissionFunc type is an adapter to allow the use of ordinary
// function as UserPermission mutator.
type UserPermissionFunc func(context.Context, *gen.UserPermissionMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f UserPermissionFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.UserPermissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.UserPermissionMutation", m)
}

// The UserRoleFunc type is an adapter to allow the use of ordinary
// function as UserRole mutator.
type UserRoleFunc func(context.Context, *gen.UserRoleMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f UserRoleFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.UserRoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.UserRoleMutation", m)
}

// The UserVoucherFunc type is an adapter to allow the use of ordinary
// function as UserVoucher mutator.
type UserVoucherFunc func(context.Context, *gen.UserVoucherMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f UserVoucherFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.UserVoucherMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.UserVoucherMutation", m)
}

// The WishlistFunc type is an adapter to allow the use of ordinary
// function as Wishlist mutator.
type WishlistFunc func(context.Context, *gen.WishlistMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f WishlistFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.WishlistMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.WishlistMutation", m)
}

// The WishlistItemFunc type is an adapter to allow the use of ordinary
// function as WishlistItem mutator.
type WishlistItemFunc func(context.Context, *gen.WishlistItemMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f WishlistItemFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	if mv, ok := m.(*gen.WishlistItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.WishlistItemMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, gen.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m gen.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m gen.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m gen.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op gen.Op) Condition {
	return func(_ context.Context, m gen.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m gen.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m gen.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m gen.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk gen.Hook, cond Condition) gen.Hook {
	return func(next gen.Mutator) gen.Mutator {
		return gen.MutateFunc(func(ctx context.Context, m gen.Mutation) (gen.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, gen.Delete|gen.Create)
func On(hk gen.Hook, op gen.Op) gen.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, gen.Update|gen.UpdateOne)
func Unless(hk gen.Hook, op gen.Op) gen.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) gen.Hook {
	return func(gen.Mutator) gen.Mutator {
		return gen.MutateFunc(func(context.Context, gen.Mutation) (gen.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []gen.Hook {
//		return []gen.Hook{
//			Reject(gen.Delete|gen.Update),
//		}
//	}
func Reject(op gen.Op) gen.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []gen.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...gen.Hook) Chain {
	return Chain{append([]gen.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() gen.Hook {
	return func(mutator gen.Mutator) gen.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...gen.Hook) Chain {
	newHooks := make([]gen.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
