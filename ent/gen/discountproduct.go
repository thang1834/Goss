// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/thang1834/go-goss/ent/gen/discount"
	"github.com/thang1834/go-goss/ent/gen/discountproduct"
	"github.com/thang1834/go-goss/ent/gen/product"
)

// DiscountProduct is the model entity for the DiscountProduct schema.
type DiscountProduct struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscountProductQuery when eager-loading is set.
	Edges             DiscountProductEdges `json:"edges"`
	discount_products *uint64
	product_discounts *uint64
	selectValues      sql.SelectValues
}

// DiscountProductEdges holds the relations/edges for other nodes in the graph.
type DiscountProductEdges struct {
	// Discount holds the value of the discount edge.
	Discount *Discount `json:"discount,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DiscountOrErr returns the Discount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscountProductEdges) DiscountOrErr() (*Discount, error) {
	if e.Discount != nil {
		return e.Discount, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: discount.Label}
	}
	return nil, &NotLoadedError{edge: "discount"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscountProductEdges) ProductOrErr() (*Product, error) {
	if e.Product != nil {
		return e.Product, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiscountProduct) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case discountproduct.FieldID:
			values[i] = new(sql.NullInt64)
		case discountproduct.ForeignKeys[0]: // discount_products
			values[i] = new(sql.NullInt64)
		case discountproduct.ForeignKeys[1]: // product_discounts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiscountProduct fields.
func (dp *DiscountProduct) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discountproduct.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dp.ID = int(value.Int64)
		case discountproduct.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field discount_products", value)
			} else if value.Valid {
				dp.discount_products = new(uint64)
				*dp.discount_products = uint64(value.Int64)
			}
		case discountproduct.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_discounts", value)
			} else if value.Valid {
				dp.product_discounts = new(uint64)
				*dp.product_discounts = uint64(value.Int64)
			}
		default:
			dp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DiscountProduct.
// This includes values selected through modifiers, order, etc.
func (dp *DiscountProduct) Value(name string) (ent.Value, error) {
	return dp.selectValues.Get(name)
}

// QueryDiscount queries the "discount" edge of the DiscountProduct entity.
func (dp *DiscountProduct) QueryDiscount() *DiscountQuery {
	return NewDiscountProductClient(dp.config).QueryDiscount(dp)
}

// QueryProduct queries the "product" edge of the DiscountProduct entity.
func (dp *DiscountProduct) QueryProduct() *ProductQuery {
	return NewDiscountProductClient(dp.config).QueryProduct(dp)
}

// Update returns a builder for updating this DiscountProduct.
// Note that you need to call DiscountProduct.Unwrap() before calling this method if this DiscountProduct
// was returned from a transaction, and the transaction was committed or rolled back.
func (dp *DiscountProduct) Update() *DiscountProductUpdateOne {
	return NewDiscountProductClient(dp.config).UpdateOne(dp)
}

// Unwrap unwraps the DiscountProduct entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dp *DiscountProduct) Unwrap() *DiscountProduct {
	_tx, ok := dp.config.driver.(*txDriver)
	if !ok {
		panic("gen: DiscountProduct is not a transactional entity")
	}
	dp.config.driver = _tx.drv
	return dp
}

// String implements the fmt.Stringer.
func (dp *DiscountProduct) String() string {
	var builder strings.Builder
	builder.WriteString("DiscountProduct(")
	builder.WriteString(fmt.Sprintf("id=%v", dp.ID))
	builder.WriteByte(')')
	return builder.String()
}

// DiscountProducts is a parsable slice of DiscountProduct.
type DiscountProducts []*DiscountProduct
