// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/discount"
	"github.com/thang1834/go-goss/ent/gen/discountcategory"
	"github.com/thang1834/go-goss/ent/gen/discountproduct"
	"github.com/thang1834/go-goss/ent/gen/predicate"
	"github.com/thang1834/go-goss/ent/gen/uservoucher"
)

// DiscountUpdate is the builder for updating Discount entities.
type DiscountUpdate struct {
	config
	hooks    []Hook
	mutation *DiscountMutation
}

// Where appends a list predicates to the DiscountUpdate builder.
func (du *DiscountUpdate) Where(ps ...predicate.Discount) *DiscountUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetCode sets the "code" field.
func (du *DiscountUpdate) SetCode(s string) *DiscountUpdate {
	du.mutation.SetCode(s)
	return du
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableCode(s *string) *DiscountUpdate {
	if s != nil {
		du.SetCode(*s)
	}
	return du
}

// SetDescription sets the "description" field.
func (du *DiscountUpdate) SetDescription(s string) *DiscountUpdate {
	du.mutation.SetDescription(s)
	return du
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableDescription(s *string) *DiscountUpdate {
	if s != nil {
		du.SetDescription(*s)
	}
	return du
}

// ClearDescription clears the value of the "description" field.
func (du *DiscountUpdate) ClearDescription() *DiscountUpdate {
	du.mutation.ClearDescription()
	return du
}

// SetDiscountType sets the "discount_type" field.
func (du *DiscountUpdate) SetDiscountType(s string) *DiscountUpdate {
	du.mutation.SetDiscountType(s)
	return du
}

// SetNillableDiscountType sets the "discount_type" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableDiscountType(s *string) *DiscountUpdate {
	if s != nil {
		du.SetDiscountType(*s)
	}
	return du
}

// SetDiscountValue sets the "discount_value" field.
func (du *DiscountUpdate) SetDiscountValue(f float64) *DiscountUpdate {
	du.mutation.ResetDiscountValue()
	du.mutation.SetDiscountValue(f)
	return du
}

// SetNillableDiscountValue sets the "discount_value" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableDiscountValue(f *float64) *DiscountUpdate {
	if f != nil {
		du.SetDiscountValue(*f)
	}
	return du
}

// AddDiscountValue adds f to the "discount_value" field.
func (du *DiscountUpdate) AddDiscountValue(f float64) *DiscountUpdate {
	du.mutation.AddDiscountValue(f)
	return du
}

// SetStartDate sets the "start_date" field.
func (du *DiscountUpdate) SetStartDate(t time.Time) *DiscountUpdate {
	du.mutation.SetStartDate(t)
	return du
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableStartDate(t *time.Time) *DiscountUpdate {
	if t != nil {
		du.SetStartDate(*t)
	}
	return du
}

// SetEndDate sets the "end_date" field.
func (du *DiscountUpdate) SetEndDate(t time.Time) *DiscountUpdate {
	du.mutation.SetEndDate(t)
	return du
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableEndDate(t *time.Time) *DiscountUpdate {
	if t != nil {
		du.SetEndDate(*t)
	}
	return du
}

// SetUsageLimit sets the "usage_limit" field.
func (du *DiscountUpdate) SetUsageLimit(i int) *DiscountUpdate {
	du.mutation.ResetUsageLimit()
	du.mutation.SetUsageLimit(i)
	return du
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableUsageLimit(i *int) *DiscountUpdate {
	if i != nil {
		du.SetUsageLimit(*i)
	}
	return du
}

// AddUsageLimit adds i to the "usage_limit" field.
func (du *DiscountUpdate) AddUsageLimit(i int) *DiscountUpdate {
	du.mutation.AddUsageLimit(i)
	return du
}

// ClearUsageLimit clears the value of the "usage_limit" field.
func (du *DiscountUpdate) ClearUsageLimit() *DiscountUpdate {
	du.mutation.ClearUsageLimit()
	return du
}

// SetUsageCount sets the "usage_count" field.
func (du *DiscountUpdate) SetUsageCount(i int) *DiscountUpdate {
	du.mutation.ResetUsageCount()
	du.mutation.SetUsageCount(i)
	return du
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableUsageCount(i *int) *DiscountUpdate {
	if i != nil {
		du.SetUsageCount(*i)
	}
	return du
}

// AddUsageCount adds i to the "usage_count" field.
func (du *DiscountUpdate) AddUsageCount(i int) *DiscountUpdate {
	du.mutation.AddUsageCount(i)
	return du
}

// SetMinOrderValue sets the "min_order_value" field.
func (du *DiscountUpdate) SetMinOrderValue(i int) *DiscountUpdate {
	du.mutation.ResetMinOrderValue()
	du.mutation.SetMinOrderValue(i)
	return du
}

// SetNillableMinOrderValue sets the "min_order_value" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableMinOrderValue(i *int) *DiscountUpdate {
	if i != nil {
		du.SetMinOrderValue(*i)
	}
	return du
}

// AddMinOrderValue adds i to the "min_order_value" field.
func (du *DiscountUpdate) AddMinOrderValue(i int) *DiscountUpdate {
	du.mutation.AddMinOrderValue(i)
	return du
}

// ClearMinOrderValue clears the value of the "min_order_value" field.
func (du *DiscountUpdate) ClearMinOrderValue() *DiscountUpdate {
	du.mutation.ClearMinOrderValue()
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DiscountUpdate) SetCreatedAt(t time.Time) *DiscountUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableCreatedAt(t *time.Time) *DiscountUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DiscountUpdate) SetUpdatedAt(t time.Time) *DiscountUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// AddProductIDs adds the "products" edge to the DiscountProduct entity by IDs.
func (du *DiscountUpdate) AddProductIDs(ids ...int) *DiscountUpdate {
	du.mutation.AddProductIDs(ids...)
	return du
}

// AddProducts adds the "products" edges to the DiscountProduct entity.
func (du *DiscountUpdate) AddProducts(d ...*DiscountProduct) *DiscountUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddProductIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the DiscountCategory entity by IDs.
func (du *DiscountUpdate) AddCategoryIDs(ids ...int) *DiscountUpdate {
	du.mutation.AddCategoryIDs(ids...)
	return du
}

// AddCategories adds the "categories" edges to the DiscountCategory entity.
func (du *DiscountUpdate) AddCategories(d ...*DiscountCategory) *DiscountUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddCategoryIDs(ids...)
}

// AddUserVoucherIDs adds the "user_vouchers" edge to the UserVoucher entity by IDs.
func (du *DiscountUpdate) AddUserVoucherIDs(ids ...uint64) *DiscountUpdate {
	du.mutation.AddUserVoucherIDs(ids...)
	return du
}

// AddUserVouchers adds the "user_vouchers" edges to the UserVoucher entity.
func (du *DiscountUpdate) AddUserVouchers(u ...*UserVoucher) *DiscountUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.AddUserVoucherIDs(ids...)
}

// Mutation returns the DiscountMutation object of the builder.
func (du *DiscountUpdate) Mutation() *DiscountMutation {
	return du.mutation
}

// ClearProducts clears all "products" edges to the DiscountProduct entity.
func (du *DiscountUpdate) ClearProducts() *DiscountUpdate {
	du.mutation.ClearProducts()
	return du
}

// RemoveProductIDs removes the "products" edge to DiscountProduct entities by IDs.
func (du *DiscountUpdate) RemoveProductIDs(ids ...int) *DiscountUpdate {
	du.mutation.RemoveProductIDs(ids...)
	return du
}

// RemoveProducts removes "products" edges to DiscountProduct entities.
func (du *DiscountUpdate) RemoveProducts(d ...*DiscountProduct) *DiscountUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveProductIDs(ids...)
}

// ClearCategories clears all "categories" edges to the DiscountCategory entity.
func (du *DiscountUpdate) ClearCategories() *DiscountUpdate {
	du.mutation.ClearCategories()
	return du
}

// RemoveCategoryIDs removes the "categories" edge to DiscountCategory entities by IDs.
func (du *DiscountUpdate) RemoveCategoryIDs(ids ...int) *DiscountUpdate {
	du.mutation.RemoveCategoryIDs(ids...)
	return du
}

// RemoveCategories removes "categories" edges to DiscountCategory entities.
func (du *DiscountUpdate) RemoveCategories(d ...*DiscountCategory) *DiscountUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveCategoryIDs(ids...)
}

// ClearUserVouchers clears all "user_vouchers" edges to the UserVoucher entity.
func (du *DiscountUpdate) ClearUserVouchers() *DiscountUpdate {
	du.mutation.ClearUserVouchers()
	return du
}

// RemoveUserVoucherIDs removes the "user_vouchers" edge to UserVoucher entities by IDs.
func (du *DiscountUpdate) RemoveUserVoucherIDs(ids ...uint64) *DiscountUpdate {
	du.mutation.RemoveUserVoucherIDs(ids...)
	return du
}

// RemoveUserVouchers removes "user_vouchers" edges to UserVoucher entities.
func (du *DiscountUpdate) RemoveUserVouchers(u ...*UserVoucher) *DiscountUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.RemoveUserVoucherIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DiscountUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DiscountUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DiscountUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DiscountUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DiscountUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		v := discount.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

func (du *DiscountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(discount.Table, discount.Columns, sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Code(); ok {
		_spec.SetField(discount.FieldCode, field.TypeString, value)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(discount.FieldDescription, field.TypeString, value)
	}
	if du.mutation.DescriptionCleared() {
		_spec.ClearField(discount.FieldDescription, field.TypeString)
	}
	if value, ok := du.mutation.DiscountType(); ok {
		_spec.SetField(discount.FieldDiscountType, field.TypeString, value)
	}
	if value, ok := du.mutation.DiscountValue(); ok {
		_spec.SetField(discount.FieldDiscountValue, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedDiscountValue(); ok {
		_spec.AddField(discount.FieldDiscountValue, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.StartDate(); ok {
		_spec.SetField(discount.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := du.mutation.EndDate(); ok {
		_spec.SetField(discount.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := du.mutation.UsageLimit(); ok {
		_spec.SetField(discount.FieldUsageLimit, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedUsageLimit(); ok {
		_spec.AddField(discount.FieldUsageLimit, field.TypeInt, value)
	}
	if du.mutation.UsageLimitCleared() {
		_spec.ClearField(discount.FieldUsageLimit, field.TypeInt)
	}
	if value, ok := du.mutation.UsageCount(); ok {
		_spec.SetField(discount.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedUsageCount(); ok {
		_spec.AddField(discount.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := du.mutation.MinOrderValue(); ok {
		_spec.SetField(discount.FieldMinOrderValue, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedMinOrderValue(); ok {
		_spec.AddField(discount.FieldMinOrderValue, field.TypeInt, value)
	}
	if du.mutation.MinOrderValueCleared() {
		_spec.ClearField(discount.FieldMinOrderValue, field.TypeInt)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(discount.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(discount.FieldUpdatedAt, field.TypeTime, value)
	}
	if du.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.ProductsTable,
			Columns: []string{discount.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedProductsIDs(); len(nodes) > 0 && !du.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.ProductsTable,
			Columns: []string{discount.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.ProductsTable,
			Columns: []string{discount.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.CategoriesTable,
			Columns: []string{discount.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !du.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.CategoriesTable,
			Columns: []string{discount.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.CategoriesTable,
			Columns: []string{discount.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.UserVouchersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.UserVouchersTable,
			Columns: []string{discount.UserVouchersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservoucher.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedUserVouchersIDs(); len(nodes) > 0 && !du.mutation.UserVouchersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.UserVouchersTable,
			Columns: []string{discount.UserVouchersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservoucher.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UserVouchersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.UserVouchersTable,
			Columns: []string{discount.UserVouchersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservoucher.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DiscountUpdateOne is the builder for updating a single Discount entity.
type DiscountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscountMutation
}

// SetCode sets the "code" field.
func (duo *DiscountUpdateOne) SetCode(s string) *DiscountUpdateOne {
	duo.mutation.SetCode(s)
	return duo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableCode(s *string) *DiscountUpdateOne {
	if s != nil {
		duo.SetCode(*s)
	}
	return duo
}

// SetDescription sets the "description" field.
func (duo *DiscountUpdateOne) SetDescription(s string) *DiscountUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableDescription(s *string) *DiscountUpdateOne {
	if s != nil {
		duo.SetDescription(*s)
	}
	return duo
}

// ClearDescription clears the value of the "description" field.
func (duo *DiscountUpdateOne) ClearDescription() *DiscountUpdateOne {
	duo.mutation.ClearDescription()
	return duo
}

// SetDiscountType sets the "discount_type" field.
func (duo *DiscountUpdateOne) SetDiscountType(s string) *DiscountUpdateOne {
	duo.mutation.SetDiscountType(s)
	return duo
}

// SetNillableDiscountType sets the "discount_type" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableDiscountType(s *string) *DiscountUpdateOne {
	if s != nil {
		duo.SetDiscountType(*s)
	}
	return duo
}

// SetDiscountValue sets the "discount_value" field.
func (duo *DiscountUpdateOne) SetDiscountValue(f float64) *DiscountUpdateOne {
	duo.mutation.ResetDiscountValue()
	duo.mutation.SetDiscountValue(f)
	return duo
}

// SetNillableDiscountValue sets the "discount_value" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableDiscountValue(f *float64) *DiscountUpdateOne {
	if f != nil {
		duo.SetDiscountValue(*f)
	}
	return duo
}

// AddDiscountValue adds f to the "discount_value" field.
func (duo *DiscountUpdateOne) AddDiscountValue(f float64) *DiscountUpdateOne {
	duo.mutation.AddDiscountValue(f)
	return duo
}

// SetStartDate sets the "start_date" field.
func (duo *DiscountUpdateOne) SetStartDate(t time.Time) *DiscountUpdateOne {
	duo.mutation.SetStartDate(t)
	return duo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableStartDate(t *time.Time) *DiscountUpdateOne {
	if t != nil {
		duo.SetStartDate(*t)
	}
	return duo
}

// SetEndDate sets the "end_date" field.
func (duo *DiscountUpdateOne) SetEndDate(t time.Time) *DiscountUpdateOne {
	duo.mutation.SetEndDate(t)
	return duo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableEndDate(t *time.Time) *DiscountUpdateOne {
	if t != nil {
		duo.SetEndDate(*t)
	}
	return duo
}

// SetUsageLimit sets the "usage_limit" field.
func (duo *DiscountUpdateOne) SetUsageLimit(i int) *DiscountUpdateOne {
	duo.mutation.ResetUsageLimit()
	duo.mutation.SetUsageLimit(i)
	return duo
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableUsageLimit(i *int) *DiscountUpdateOne {
	if i != nil {
		duo.SetUsageLimit(*i)
	}
	return duo
}

// AddUsageLimit adds i to the "usage_limit" field.
func (duo *DiscountUpdateOne) AddUsageLimit(i int) *DiscountUpdateOne {
	duo.mutation.AddUsageLimit(i)
	return duo
}

// ClearUsageLimit clears the value of the "usage_limit" field.
func (duo *DiscountUpdateOne) ClearUsageLimit() *DiscountUpdateOne {
	duo.mutation.ClearUsageLimit()
	return duo
}

// SetUsageCount sets the "usage_count" field.
func (duo *DiscountUpdateOne) SetUsageCount(i int) *DiscountUpdateOne {
	duo.mutation.ResetUsageCount()
	duo.mutation.SetUsageCount(i)
	return duo
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableUsageCount(i *int) *DiscountUpdateOne {
	if i != nil {
		duo.SetUsageCount(*i)
	}
	return duo
}

// AddUsageCount adds i to the "usage_count" field.
func (duo *DiscountUpdateOne) AddUsageCount(i int) *DiscountUpdateOne {
	duo.mutation.AddUsageCount(i)
	return duo
}

// SetMinOrderValue sets the "min_order_value" field.
func (duo *DiscountUpdateOne) SetMinOrderValue(i int) *DiscountUpdateOne {
	duo.mutation.ResetMinOrderValue()
	duo.mutation.SetMinOrderValue(i)
	return duo
}

// SetNillableMinOrderValue sets the "min_order_value" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableMinOrderValue(i *int) *DiscountUpdateOne {
	if i != nil {
		duo.SetMinOrderValue(*i)
	}
	return duo
}

// AddMinOrderValue adds i to the "min_order_value" field.
func (duo *DiscountUpdateOne) AddMinOrderValue(i int) *DiscountUpdateOne {
	duo.mutation.AddMinOrderValue(i)
	return duo
}

// ClearMinOrderValue clears the value of the "min_order_value" field.
func (duo *DiscountUpdateOne) ClearMinOrderValue() *DiscountUpdateOne {
	duo.mutation.ClearMinOrderValue()
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DiscountUpdateOne) SetCreatedAt(t time.Time) *DiscountUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableCreatedAt(t *time.Time) *DiscountUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DiscountUpdateOne) SetUpdatedAt(t time.Time) *DiscountUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// AddProductIDs adds the "products" edge to the DiscountProduct entity by IDs.
func (duo *DiscountUpdateOne) AddProductIDs(ids ...int) *DiscountUpdateOne {
	duo.mutation.AddProductIDs(ids...)
	return duo
}

// AddProducts adds the "products" edges to the DiscountProduct entity.
func (duo *DiscountUpdateOne) AddProducts(d ...*DiscountProduct) *DiscountUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddProductIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the DiscountCategory entity by IDs.
func (duo *DiscountUpdateOne) AddCategoryIDs(ids ...int) *DiscountUpdateOne {
	duo.mutation.AddCategoryIDs(ids...)
	return duo
}

// AddCategories adds the "categories" edges to the DiscountCategory entity.
func (duo *DiscountUpdateOne) AddCategories(d ...*DiscountCategory) *DiscountUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddCategoryIDs(ids...)
}

// AddUserVoucherIDs adds the "user_vouchers" edge to the UserVoucher entity by IDs.
func (duo *DiscountUpdateOne) AddUserVoucherIDs(ids ...uint64) *DiscountUpdateOne {
	duo.mutation.AddUserVoucherIDs(ids...)
	return duo
}

// AddUserVouchers adds the "user_vouchers" edges to the UserVoucher entity.
func (duo *DiscountUpdateOne) AddUserVouchers(u ...*UserVoucher) *DiscountUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.AddUserVoucherIDs(ids...)
}

// Mutation returns the DiscountMutation object of the builder.
func (duo *DiscountUpdateOne) Mutation() *DiscountMutation {
	return duo.mutation
}

// ClearProducts clears all "products" edges to the DiscountProduct entity.
func (duo *DiscountUpdateOne) ClearProducts() *DiscountUpdateOne {
	duo.mutation.ClearProducts()
	return duo
}

// RemoveProductIDs removes the "products" edge to DiscountProduct entities by IDs.
func (duo *DiscountUpdateOne) RemoveProductIDs(ids ...int) *DiscountUpdateOne {
	duo.mutation.RemoveProductIDs(ids...)
	return duo
}

// RemoveProducts removes "products" edges to DiscountProduct entities.
func (duo *DiscountUpdateOne) RemoveProducts(d ...*DiscountProduct) *DiscountUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveProductIDs(ids...)
}

// ClearCategories clears all "categories" edges to the DiscountCategory entity.
func (duo *DiscountUpdateOne) ClearCategories() *DiscountUpdateOne {
	duo.mutation.ClearCategories()
	return duo
}

// RemoveCategoryIDs removes the "categories" edge to DiscountCategory entities by IDs.
func (duo *DiscountUpdateOne) RemoveCategoryIDs(ids ...int) *DiscountUpdateOne {
	duo.mutation.RemoveCategoryIDs(ids...)
	return duo
}

// RemoveCategories removes "categories" edges to DiscountCategory entities.
func (duo *DiscountUpdateOne) RemoveCategories(d ...*DiscountCategory) *DiscountUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveCategoryIDs(ids...)
}

// ClearUserVouchers clears all "user_vouchers" edges to the UserVoucher entity.
func (duo *DiscountUpdateOne) ClearUserVouchers() *DiscountUpdateOne {
	duo.mutation.ClearUserVouchers()
	return duo
}

// RemoveUserVoucherIDs removes the "user_vouchers" edge to UserVoucher entities by IDs.
func (duo *DiscountUpdateOne) RemoveUserVoucherIDs(ids ...uint64) *DiscountUpdateOne {
	duo.mutation.RemoveUserVoucherIDs(ids...)
	return duo
}

// RemoveUserVouchers removes "user_vouchers" edges to UserVoucher entities.
func (duo *DiscountUpdateOne) RemoveUserVouchers(u ...*UserVoucher) *DiscountUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.RemoveUserVoucherIDs(ids...)
}

// Where appends a list predicates to the DiscountUpdate builder.
func (duo *DiscountUpdateOne) Where(ps ...predicate.Discount) *DiscountUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DiscountUpdateOne) Select(field string, fields ...string) *DiscountUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Discount entity.
func (duo *DiscountUpdateOne) Save(ctx context.Context) (*Discount, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DiscountUpdateOne) SaveX(ctx context.Context) *Discount {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DiscountUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DiscountUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DiscountUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		v := discount.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

func (duo *DiscountUpdateOne) sqlSave(ctx context.Context) (_node *Discount, err error) {
	_spec := sqlgraph.NewUpdateSpec(discount.Table, discount.Columns, sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Discount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discount.FieldID)
		for _, f := range fields {
			if !discount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != discount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Code(); ok {
		_spec.SetField(discount.FieldCode, field.TypeString, value)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(discount.FieldDescription, field.TypeString, value)
	}
	if duo.mutation.DescriptionCleared() {
		_spec.ClearField(discount.FieldDescription, field.TypeString)
	}
	if value, ok := duo.mutation.DiscountType(); ok {
		_spec.SetField(discount.FieldDiscountType, field.TypeString, value)
	}
	if value, ok := duo.mutation.DiscountValue(); ok {
		_spec.SetField(discount.FieldDiscountValue, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedDiscountValue(); ok {
		_spec.AddField(discount.FieldDiscountValue, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.StartDate(); ok {
		_spec.SetField(discount.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := duo.mutation.EndDate(); ok {
		_spec.SetField(discount.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := duo.mutation.UsageLimit(); ok {
		_spec.SetField(discount.FieldUsageLimit, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedUsageLimit(); ok {
		_spec.AddField(discount.FieldUsageLimit, field.TypeInt, value)
	}
	if duo.mutation.UsageLimitCleared() {
		_spec.ClearField(discount.FieldUsageLimit, field.TypeInt)
	}
	if value, ok := duo.mutation.UsageCount(); ok {
		_spec.SetField(discount.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedUsageCount(); ok {
		_spec.AddField(discount.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := duo.mutation.MinOrderValue(); ok {
		_spec.SetField(discount.FieldMinOrderValue, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedMinOrderValue(); ok {
		_spec.AddField(discount.FieldMinOrderValue, field.TypeInt, value)
	}
	if duo.mutation.MinOrderValueCleared() {
		_spec.ClearField(discount.FieldMinOrderValue, field.TypeInt)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(discount.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(discount.FieldUpdatedAt, field.TypeTime, value)
	}
	if duo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.ProductsTable,
			Columns: []string{discount.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !duo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.ProductsTable,
			Columns: []string{discount.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.ProductsTable,
			Columns: []string{discount.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.CategoriesTable,
			Columns: []string{discount.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !duo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.CategoriesTable,
			Columns: []string{discount.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.CategoriesTable,
			Columns: []string{discount.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.UserVouchersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.UserVouchersTable,
			Columns: []string{discount.UserVouchersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservoucher.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedUserVouchersIDs(); len(nodes) > 0 && !duo.mutation.UserVouchersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.UserVouchersTable,
			Columns: []string{discount.UserVouchersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservoucher.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UserVouchersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.UserVouchersTable,
			Columns: []string{discount.UserVouchersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservoucher.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Discount{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
