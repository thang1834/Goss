// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/cartitem"
	"github.com/thang1834/go-goss/ent/gen/category"
	"github.com/thang1834/go-goss/ent/gen/discountproduct"
	"github.com/thang1834/go-goss/ent/gen/orderitem"
	"github.com/thang1834/go-goss/ent/gen/predicate"
	"github.com/thang1834/go-goss/ent/gen/product"
	"github.com/thang1834/go-goss/ent/gen/productimage"
	"github.com/thang1834/go-goss/ent/gen/review"
	"github.com/thang1834/go-goss/ent/gen/wishlistitem"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetSlug sets the "slug" field.
func (pu *ProductUpdate) SetSlug(s string) *ProductUpdate {
	pu.mutation.SetSlug(s)
	return pu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSlug(s *string) *ProductUpdate {
	if s != nil {
		pu.SetSlug(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProductUpdate) SetDescription(s string) *ProductUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDescription(s *string) *ProductUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProductUpdate) ClearDescription() *ProductUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetPrice sets the "price" field.
func (pu *ProductUpdate) SetPrice(f float64) *ProductUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(f)
	return pu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePrice(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetPrice(*f)
	}
	return pu
}

// AddPrice adds f to the "price" field.
func (pu *ProductUpdate) AddPrice(f float64) *ProductUpdate {
	pu.mutation.AddPrice(f)
	return pu
}

// SetStockQuantity sets the "stock_quantity" field.
func (pu *ProductUpdate) SetStockQuantity(i int) *ProductUpdate {
	pu.mutation.ResetStockQuantity()
	pu.mutation.SetStockQuantity(i)
	return pu
}

// SetNillableStockQuantity sets the "stock_quantity" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableStockQuantity(i *int) *ProductUpdate {
	if i != nil {
		pu.SetStockQuantity(*i)
	}
	return pu
}

// AddStockQuantity adds i to the "stock_quantity" field.
func (pu *ProductUpdate) AddStockQuantity(i int) *ProductUpdate {
	pu.mutation.AddStockQuantity(i)
	return pu
}

// SetAvgRating sets the "avg_rating" field.
func (pu *ProductUpdate) SetAvgRating(f float64) *ProductUpdate {
	pu.mutation.ResetAvgRating()
	pu.mutation.SetAvgRating(f)
	return pu
}

// SetNillableAvgRating sets the "avg_rating" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableAvgRating(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetAvgRating(*f)
	}
	return pu
}

// AddAvgRating adds f to the "avg_rating" field.
func (pu *ProductUpdate) AddAvgRating(f float64) *ProductUpdate {
	pu.mutation.AddAvgRating(f)
	return pu
}

// SetReviewCount sets the "review_count" field.
func (pu *ProductUpdate) SetReviewCount(i int) *ProductUpdate {
	pu.mutation.ResetReviewCount()
	pu.mutation.SetReviewCount(i)
	return pu
}

// SetNillableReviewCount sets the "review_count" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableReviewCount(i *int) *ProductUpdate {
	if i != nil {
		pu.SetReviewCount(*i)
	}
	return pu
}

// AddReviewCount adds i to the "review_count" field.
func (pu *ProductUpdate) AddReviewCount(i int) *ProductUpdate {
	pu.mutation.AddReviewCount(i)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProductUpdate) SetCreatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCreatedAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (pu *ProductUpdate) SetCategoryID(id uint64) *ProductUpdate {
	pu.mutation.SetCategoryID(id)
	return pu
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (pu *ProductUpdate) SetNillableCategoryID(id *uint64) *ProductUpdate {
	if id != nil {
		pu = pu.SetCategoryID(*id)
	}
	return pu
}

// SetCategory sets the "category" edge to the Category entity.
func (pu *ProductUpdate) SetCategory(c *Category) *ProductUpdate {
	return pu.SetCategoryID(c.ID)
}

// AddImageIDs adds the "images" edge to the ProductImage entity by IDs.
func (pu *ProductUpdate) AddImageIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.AddImageIDs(ids...)
	return pu
}

// AddImages adds the "images" edges to the ProductImage entity.
func (pu *ProductUpdate) AddImages(p ...*ProductImage) *ProductUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddImageIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (pu *ProductUpdate) AddReviewIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.AddReviewIDs(ids...)
	return pu
}

// AddReviews adds the "reviews" edges to the Review entity.
func (pu *ProductUpdate) AddReviews(r ...*Review) *ProductUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddReviewIDs(ids...)
}

// AddCartItemIDs adds the "cart_items" edge to the CartItem entity by IDs.
func (pu *ProductUpdate) AddCartItemIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddCartItemIDs(ids...)
	return pu
}

// AddCartItems adds the "cart_items" edges to the CartItem entity.
func (pu *ProductUpdate) AddCartItems(c ...*CartItem) *ProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCartItemIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (pu *ProductUpdate) AddOrderItemIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.AddOrderItemIDs(ids...)
	return pu
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (pu *ProductUpdate) AddOrderItems(o ...*OrderItem) *ProductUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrderItemIDs(ids...)
}

// AddDiscountIDs adds the "discounts" edge to the DiscountProduct entity by IDs.
func (pu *ProductUpdate) AddDiscountIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddDiscountIDs(ids...)
	return pu
}

// AddDiscounts adds the "discounts" edges to the DiscountProduct entity.
func (pu *ProductUpdate) AddDiscounts(d ...*DiscountProduct) *ProductUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDiscountIDs(ids...)
}

// AddWishlistItemIDs adds the "wishlist_items" edge to the WishlistItem entity by IDs.
func (pu *ProductUpdate) AddWishlistItemIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddWishlistItemIDs(ids...)
	return pu
}

// AddWishlistItems adds the "wishlist_items" edges to the WishlistItem entity.
func (pu *ProductUpdate) AddWishlistItems(w ...*WishlistItem) *ProductUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return pu.AddWishlistItemIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (pu *ProductUpdate) ClearCategory() *ProductUpdate {
	pu.mutation.ClearCategory()
	return pu
}

// ClearImages clears all "images" edges to the ProductImage entity.
func (pu *ProductUpdate) ClearImages() *ProductUpdate {
	pu.mutation.ClearImages()
	return pu
}

// RemoveImageIDs removes the "images" edge to ProductImage entities by IDs.
func (pu *ProductUpdate) RemoveImageIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.RemoveImageIDs(ids...)
	return pu
}

// RemoveImages removes "images" edges to ProductImage entities.
func (pu *ProductUpdate) RemoveImages(p ...*ProductImage) *ProductUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveImageIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (pu *ProductUpdate) ClearReviews() *ProductUpdate {
	pu.mutation.ClearReviews()
	return pu
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (pu *ProductUpdate) RemoveReviewIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.RemoveReviewIDs(ids...)
	return pu
}

// RemoveReviews removes "reviews" edges to Review entities.
func (pu *ProductUpdate) RemoveReviews(r ...*Review) *ProductUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveReviewIDs(ids...)
}

// ClearCartItems clears all "cart_items" edges to the CartItem entity.
func (pu *ProductUpdate) ClearCartItems() *ProductUpdate {
	pu.mutation.ClearCartItems()
	return pu
}

// RemoveCartItemIDs removes the "cart_items" edge to CartItem entities by IDs.
func (pu *ProductUpdate) RemoveCartItemIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveCartItemIDs(ids...)
	return pu
}

// RemoveCartItems removes "cart_items" edges to CartItem entities.
func (pu *ProductUpdate) RemoveCartItems(c ...*CartItem) *ProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCartItemIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (pu *ProductUpdate) ClearOrderItems() *ProductUpdate {
	pu.mutation.ClearOrderItems()
	return pu
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (pu *ProductUpdate) RemoveOrderItemIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.RemoveOrderItemIDs(ids...)
	return pu
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (pu *ProductUpdate) RemoveOrderItems(o ...*OrderItem) *ProductUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrderItemIDs(ids...)
}

// ClearDiscounts clears all "discounts" edges to the DiscountProduct entity.
func (pu *ProductUpdate) ClearDiscounts() *ProductUpdate {
	pu.mutation.ClearDiscounts()
	return pu
}

// RemoveDiscountIDs removes the "discounts" edge to DiscountProduct entities by IDs.
func (pu *ProductUpdate) RemoveDiscountIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveDiscountIDs(ids...)
	return pu
}

// RemoveDiscounts removes "discounts" edges to DiscountProduct entities.
func (pu *ProductUpdate) RemoveDiscounts(d ...*DiscountProduct) *ProductUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDiscountIDs(ids...)
}

// ClearWishlistItems clears all "wishlist_items" edges to the WishlistItem entity.
func (pu *ProductUpdate) ClearWishlistItems() *ProductUpdate {
	pu.mutation.ClearWishlistItems()
	return pu
}

// RemoveWishlistItemIDs removes the "wishlist_items" edge to WishlistItem entities by IDs.
func (pu *ProductUpdate) RemoveWishlistItemIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveWishlistItemIDs(ids...)
	return pu
}

// RemoveWishlistItems removes "wishlist_items" edges to WishlistItem entities.
func (pu *ProductUpdate) RemoveWishlistItems(w ...*WishlistItem) *ProductUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return pu.RemoveWishlistItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Slug(); ok {
		if err := product.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`gen: validator failed for field "Product.slug": %w`, err)}
		}
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Slug(); ok {
		_spec.SetField(product.FieldSlug, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(product.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.StockQuantity(); ok {
		_spec.SetField(product.FieldStockQuantity, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedStockQuantity(); ok {
		_spec.AddField(product.FieldStockQuantity, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AvgRating(); ok {
		_spec.SetField(product.FieldAvgRating, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedAvgRating(); ok {
		_spec.AddField(product.FieldAvgRating, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.ReviewCount(); ok {
		_spec.SetField(product.FieldReviewCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedReviewCount(); ok {
		_spec.AddField(product.FieldReviewCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ImagesTable,
			Columns: []string{product.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !pu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ImagesTable,
			Columns: []string{product.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ImagesTable,
			Columns: []string{product.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReviewsTable,
			Columns: []string{product.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !pu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReviewsTable,
			Columns: []string{product.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReviewsTable,
			Columns: []string{product.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCartItemsIDs(); len(nodes) > 0 && !pu.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CartItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !pu.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.DiscountsTable,
			Columns: []string{product.DiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDiscountsIDs(); len(nodes) > 0 && !pu.mutation.DiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.DiscountsTable,
			Columns: []string{product.DiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.DiscountsTable,
			Columns: []string{product.DiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.WishlistItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.WishlistItemsTable,
			Columns: []string{product.WishlistItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedWishlistItemsIDs(); len(nodes) > 0 && !pu.mutation.WishlistItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.WishlistItemsTable,
			Columns: []string{product.WishlistItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.WishlistItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.WishlistItemsTable,
			Columns: []string{product.WishlistItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetSlug sets the "slug" field.
func (puo *ProductUpdateOne) SetSlug(s string) *ProductUpdateOne {
	puo.mutation.SetSlug(s)
	return puo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSlug(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetSlug(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProductUpdateOne) SetDescription(s string) *ProductUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDescription(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProductUpdateOne) ClearDescription() *ProductUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetPrice sets the "price" field.
func (puo *ProductUpdateOne) SetPrice(f float64) *ProductUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(f)
	return puo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePrice(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetPrice(*f)
	}
	return puo
}

// AddPrice adds f to the "price" field.
func (puo *ProductUpdateOne) AddPrice(f float64) *ProductUpdateOne {
	puo.mutation.AddPrice(f)
	return puo
}

// SetStockQuantity sets the "stock_quantity" field.
func (puo *ProductUpdateOne) SetStockQuantity(i int) *ProductUpdateOne {
	puo.mutation.ResetStockQuantity()
	puo.mutation.SetStockQuantity(i)
	return puo
}

// SetNillableStockQuantity sets the "stock_quantity" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableStockQuantity(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetStockQuantity(*i)
	}
	return puo
}

// AddStockQuantity adds i to the "stock_quantity" field.
func (puo *ProductUpdateOne) AddStockQuantity(i int) *ProductUpdateOne {
	puo.mutation.AddStockQuantity(i)
	return puo
}

// SetAvgRating sets the "avg_rating" field.
func (puo *ProductUpdateOne) SetAvgRating(f float64) *ProductUpdateOne {
	puo.mutation.ResetAvgRating()
	puo.mutation.SetAvgRating(f)
	return puo
}

// SetNillableAvgRating sets the "avg_rating" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableAvgRating(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetAvgRating(*f)
	}
	return puo
}

// AddAvgRating adds f to the "avg_rating" field.
func (puo *ProductUpdateOne) AddAvgRating(f float64) *ProductUpdateOne {
	puo.mutation.AddAvgRating(f)
	return puo
}

// SetReviewCount sets the "review_count" field.
func (puo *ProductUpdateOne) SetReviewCount(i int) *ProductUpdateOne {
	puo.mutation.ResetReviewCount()
	puo.mutation.SetReviewCount(i)
	return puo
}

// SetNillableReviewCount sets the "review_count" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableReviewCount(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetReviewCount(*i)
	}
	return puo
}

// AddReviewCount adds i to the "review_count" field.
func (puo *ProductUpdateOne) AddReviewCount(i int) *ProductUpdateOne {
	puo.mutation.AddReviewCount(i)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProductUpdateOne) SetCreatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCreatedAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (puo *ProductUpdateOne) SetCategoryID(id uint64) *ProductUpdateOne {
	puo.mutation.SetCategoryID(id)
	return puo
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCategoryID(id *uint64) *ProductUpdateOne {
	if id != nil {
		puo = puo.SetCategoryID(*id)
	}
	return puo
}

// SetCategory sets the "category" edge to the Category entity.
func (puo *ProductUpdateOne) SetCategory(c *Category) *ProductUpdateOne {
	return puo.SetCategoryID(c.ID)
}

// AddImageIDs adds the "images" edge to the ProductImage entity by IDs.
func (puo *ProductUpdateOne) AddImageIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.AddImageIDs(ids...)
	return puo
}

// AddImages adds the "images" edges to the ProductImage entity.
func (puo *ProductUpdateOne) AddImages(p ...*ProductImage) *ProductUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddImageIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (puo *ProductUpdateOne) AddReviewIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.AddReviewIDs(ids...)
	return puo
}

// AddReviews adds the "reviews" edges to the Review entity.
func (puo *ProductUpdateOne) AddReviews(r ...*Review) *ProductUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddReviewIDs(ids...)
}

// AddCartItemIDs adds the "cart_items" edge to the CartItem entity by IDs.
func (puo *ProductUpdateOne) AddCartItemIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddCartItemIDs(ids...)
	return puo
}

// AddCartItems adds the "cart_items" edges to the CartItem entity.
func (puo *ProductUpdateOne) AddCartItems(c ...*CartItem) *ProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCartItemIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (puo *ProductUpdateOne) AddOrderItemIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.AddOrderItemIDs(ids...)
	return puo
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (puo *ProductUpdateOne) AddOrderItems(o ...*OrderItem) *ProductUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrderItemIDs(ids...)
}

// AddDiscountIDs adds the "discounts" edge to the DiscountProduct entity by IDs.
func (puo *ProductUpdateOne) AddDiscountIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddDiscountIDs(ids...)
	return puo
}

// AddDiscounts adds the "discounts" edges to the DiscountProduct entity.
func (puo *ProductUpdateOne) AddDiscounts(d ...*DiscountProduct) *ProductUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDiscountIDs(ids...)
}

// AddWishlistItemIDs adds the "wishlist_items" edge to the WishlistItem entity by IDs.
func (puo *ProductUpdateOne) AddWishlistItemIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddWishlistItemIDs(ids...)
	return puo
}

// AddWishlistItems adds the "wishlist_items" edges to the WishlistItem entity.
func (puo *ProductUpdateOne) AddWishlistItems(w ...*WishlistItem) *ProductUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return puo.AddWishlistItemIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (puo *ProductUpdateOne) ClearCategory() *ProductUpdateOne {
	puo.mutation.ClearCategory()
	return puo
}

// ClearImages clears all "images" edges to the ProductImage entity.
func (puo *ProductUpdateOne) ClearImages() *ProductUpdateOne {
	puo.mutation.ClearImages()
	return puo
}

// RemoveImageIDs removes the "images" edge to ProductImage entities by IDs.
func (puo *ProductUpdateOne) RemoveImageIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.RemoveImageIDs(ids...)
	return puo
}

// RemoveImages removes "images" edges to ProductImage entities.
func (puo *ProductUpdateOne) RemoveImages(p ...*ProductImage) *ProductUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveImageIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (puo *ProductUpdateOne) ClearReviews() *ProductUpdateOne {
	puo.mutation.ClearReviews()
	return puo
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (puo *ProductUpdateOne) RemoveReviewIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.RemoveReviewIDs(ids...)
	return puo
}

// RemoveReviews removes "reviews" edges to Review entities.
func (puo *ProductUpdateOne) RemoveReviews(r ...*Review) *ProductUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveReviewIDs(ids...)
}

// ClearCartItems clears all "cart_items" edges to the CartItem entity.
func (puo *ProductUpdateOne) ClearCartItems() *ProductUpdateOne {
	puo.mutation.ClearCartItems()
	return puo
}

// RemoveCartItemIDs removes the "cart_items" edge to CartItem entities by IDs.
func (puo *ProductUpdateOne) RemoveCartItemIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveCartItemIDs(ids...)
	return puo
}

// RemoveCartItems removes "cart_items" edges to CartItem entities.
func (puo *ProductUpdateOne) RemoveCartItems(c ...*CartItem) *ProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCartItemIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (puo *ProductUpdateOne) ClearOrderItems() *ProductUpdateOne {
	puo.mutation.ClearOrderItems()
	return puo
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (puo *ProductUpdateOne) RemoveOrderItemIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.RemoveOrderItemIDs(ids...)
	return puo
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (puo *ProductUpdateOne) RemoveOrderItems(o ...*OrderItem) *ProductUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrderItemIDs(ids...)
}

// ClearDiscounts clears all "discounts" edges to the DiscountProduct entity.
func (puo *ProductUpdateOne) ClearDiscounts() *ProductUpdateOne {
	puo.mutation.ClearDiscounts()
	return puo
}

// RemoveDiscountIDs removes the "discounts" edge to DiscountProduct entities by IDs.
func (puo *ProductUpdateOne) RemoveDiscountIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveDiscountIDs(ids...)
	return puo
}

// RemoveDiscounts removes "discounts" edges to DiscountProduct entities.
func (puo *ProductUpdateOne) RemoveDiscounts(d ...*DiscountProduct) *ProductUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDiscountIDs(ids...)
}

// ClearWishlistItems clears all "wishlist_items" edges to the WishlistItem entity.
func (puo *ProductUpdateOne) ClearWishlistItems() *ProductUpdateOne {
	puo.mutation.ClearWishlistItems()
	return puo
}

// RemoveWishlistItemIDs removes the "wishlist_items" edge to WishlistItem entities by IDs.
func (puo *ProductUpdateOne) RemoveWishlistItemIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveWishlistItemIDs(ids...)
	return puo
}

// RemoveWishlistItems removes "wishlist_items" edges to WishlistItem entities.
func (puo *ProductUpdateOne) RemoveWishlistItems(w ...*WishlistItem) *ProductUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return puo.RemoveWishlistItemIDs(ids...)
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Slug(); ok {
		if err := product.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`gen: validator failed for field "Product.slug": %w`, err)}
		}
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Slug(); ok {
		_spec.SetField(product.FieldSlug, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(product.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.StockQuantity(); ok {
		_spec.SetField(product.FieldStockQuantity, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedStockQuantity(); ok {
		_spec.AddField(product.FieldStockQuantity, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AvgRating(); ok {
		_spec.SetField(product.FieldAvgRating, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedAvgRating(); ok {
		_spec.AddField(product.FieldAvgRating, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.ReviewCount(); ok {
		_spec.SetField(product.FieldReviewCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedReviewCount(); ok {
		_spec.AddField(product.FieldReviewCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ImagesTable,
			Columns: []string{product.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !puo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ImagesTable,
			Columns: []string{product.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ImagesTable,
			Columns: []string{product.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReviewsTable,
			Columns: []string{product.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !puo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReviewsTable,
			Columns: []string{product.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReviewsTable,
			Columns: []string{product.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCartItemsIDs(); len(nodes) > 0 && !puo.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CartItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !puo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.DiscountsTable,
			Columns: []string{product.DiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDiscountsIDs(); len(nodes) > 0 && !puo.mutation.DiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.DiscountsTable,
			Columns: []string{product.DiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.DiscountsTable,
			Columns: []string{product.DiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.WishlistItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.WishlistItemsTable,
			Columns: []string{product.WishlistItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedWishlistItemsIDs(); len(nodes) > 0 && !puo.mutation.WishlistItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.WishlistItemsTable,
			Columns: []string{product.WishlistItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.WishlistItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.WishlistItemsTable,
			Columns: []string{product.WishlistItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
