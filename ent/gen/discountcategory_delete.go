// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/discountcategory"
	"github.com/thang1834/go-goss/ent/gen/predicate"
)

// DiscountCategoryDelete is the builder for deleting a DiscountCategory entity.
type DiscountCategoryDelete struct {
	config
	hooks    []Hook
	mutation *DiscountCategoryMutation
}

// Where appends a list predicates to the DiscountCategoryDelete builder.
func (dcd *DiscountCategoryDelete) Where(ps ...predicate.DiscountCategory) *DiscountCategoryDelete {
	dcd.mutation.Where(ps...)
	return dcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dcd *DiscountCategoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dcd.sqlExec, dcd.mutation, dcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dcd *DiscountCategoryDelete) ExecX(ctx context.Context) int {
	n, err := dcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dcd *DiscountCategoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(discountcategory.Table, sqlgraph.NewFieldSpec(discountcategory.FieldID, field.TypeInt))
	if ps := dcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dcd.mutation.done = true
	return affected, err
}

// DiscountCategoryDeleteOne is the builder for deleting a single DiscountCategory entity.
type DiscountCategoryDeleteOne struct {
	dcd *DiscountCategoryDelete
}

// Where appends a list predicates to the DiscountCategoryDelete builder.
func (dcdo *DiscountCategoryDeleteOne) Where(ps ...predicate.DiscountCategory) *DiscountCategoryDeleteOne {
	dcdo.dcd.mutation.Where(ps...)
	return dcdo
}

// Exec executes the deletion query.
func (dcdo *DiscountCategoryDeleteOne) Exec(ctx context.Context) error {
	n, err := dcdo.dcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{discountcategory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dcdo *DiscountCategoryDeleteOne) ExecX(ctx context.Context) {
	if err := dcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
