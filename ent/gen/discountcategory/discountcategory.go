// Code generated by ent, DO NOT EDIT.

package discountcategory

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the discountcategory type in the database.
	Label = "discount_category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeDiscount holds the string denoting the discount edge name in mutations.
	EdgeDiscount = "discount"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// Table holds the table name of the discountcategory in the database.
	Table = "discount_categories"
	// DiscountTable is the table that holds the discount relation/edge.
	DiscountTable = "discount_categories"
	// DiscountInverseTable is the table name for the Discount entity.
	// It exists in this package in order to avoid circular dependency with the "discount" package.
	DiscountInverseTable = "discounts"
	// DiscountColumn is the table column denoting the discount relation/edge.
	DiscountColumn = "discount_categories"
	// CategoryTable is the table that holds the category relation/edge.
	CategoryTable = "discount_categories"
	// CategoryInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoryInverseTable = "categories"
	// CategoryColumn is the table column denoting the category relation/edge.
	CategoryColumn = "category_discounts"
)

// Columns holds all SQL columns for discountcategory fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "discount_categories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"category_discounts",
	"discount_categories",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the DiscountCategory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDiscountField orders the results by discount field.
func ByDiscountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiscountStep(), sql.OrderByField(field, opts...))
	}
}

// ByCategoryField orders the results by category field.
func ByCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoryStep(), sql.OrderByField(field, opts...))
	}
}
func newDiscountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiscountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DiscountTable, DiscountColumn),
	)
}
func newCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
	)
}
