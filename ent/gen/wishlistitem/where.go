// Code generated by ent, DO NOT EDIT.

package wishlistitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/thang1834/go-goss/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldLTE(FieldID, id))
}

// AddedAt applies equality check predicate on the "added_at" field. It's identical to AddedAtEQ.
func AddedAt(v time.Time) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldEQ(FieldAddedAt, v))
}

// AddedAtEQ applies the EQ predicate on the "added_at" field.
func AddedAtEQ(v time.Time) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldEQ(FieldAddedAt, v))
}

// AddedAtNEQ applies the NEQ predicate on the "added_at" field.
func AddedAtNEQ(v time.Time) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldNEQ(FieldAddedAt, v))
}

// AddedAtIn applies the In predicate on the "added_at" field.
func AddedAtIn(vs ...time.Time) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldIn(FieldAddedAt, vs...))
}

// AddedAtNotIn applies the NotIn predicate on the "added_at" field.
func AddedAtNotIn(vs ...time.Time) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldNotIn(FieldAddedAt, vs...))
}

// AddedAtGT applies the GT predicate on the "added_at" field.
func AddedAtGT(v time.Time) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldGT(FieldAddedAt, v))
}

// AddedAtGTE applies the GTE predicate on the "added_at" field.
func AddedAtGTE(v time.Time) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldGTE(FieldAddedAt, v))
}

// AddedAtLT applies the LT predicate on the "added_at" field.
func AddedAtLT(v time.Time) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldLT(FieldAddedAt, v))
}

// AddedAtLTE applies the LTE predicate on the "added_at" field.
func AddedAtLTE(v time.Time) predicate.WishlistItem {
	return predicate.WishlistItem(sql.FieldLTE(FieldAddedAt, v))
}

// HasWishlist applies the HasEdge predicate on the "wishlist" edge.
func HasWishlist() predicate.WishlistItem {
	return predicate.WishlistItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WishlistTable, WishlistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWishlistWith applies the HasEdge predicate on the "wishlist" edge with a given conditions (other predicates).
func HasWishlistWith(preds ...predicate.Wishlist) predicate.WishlistItem {
	return predicate.WishlistItem(func(s *sql.Selector) {
		step := newWishlistStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.WishlistItem {
	return predicate.WishlistItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.WishlistItem {
	return predicate.WishlistItem(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WishlistItem) predicate.WishlistItem {
	return predicate.WishlistItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WishlistItem) predicate.WishlistItem {
	return predicate.WishlistItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WishlistItem) predicate.WishlistItem {
	return predicate.WishlistItem(sql.NotPredicates(p))
}
