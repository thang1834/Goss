// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/predicate"
	"github.com/thang1834/go-goss/ent/gen/user"
	"github.com/thang1834/go-goss/ent/gen/wishlist"
	"github.com/thang1834/go-goss/ent/gen/wishlistitem"
)

// WishlistUpdate is the builder for updating Wishlist entities.
type WishlistUpdate struct {
	config
	hooks    []Hook
	mutation *WishlistMutation
}

// Where appends a list predicates to the WishlistUpdate builder.
func (wu *WishlistUpdate) Where(ps ...predicate.Wishlist) *WishlistUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetCreatedAt sets the "created_at" field.
func (wu *WishlistUpdate) SetCreatedAt(t time.Time) *WishlistUpdate {
	wu.mutation.SetCreatedAt(t)
	return wu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wu *WishlistUpdate) SetNillableCreatedAt(t *time.Time) *WishlistUpdate {
	if t != nil {
		wu.SetCreatedAt(*t)
	}
	return wu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (wu *WishlistUpdate) SetUserID(id uint64) *WishlistUpdate {
	wu.mutation.SetUserID(id)
	return wu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (wu *WishlistUpdate) SetNillableUserID(id *uint64) *WishlistUpdate {
	if id != nil {
		wu = wu.SetUserID(*id)
	}
	return wu
}

// SetUser sets the "user" edge to the User entity.
func (wu *WishlistUpdate) SetUser(u *User) *WishlistUpdate {
	return wu.SetUserID(u.ID)
}

// AddItemIDs adds the "items" edge to the WishlistItem entity by IDs.
func (wu *WishlistUpdate) AddItemIDs(ids ...int) *WishlistUpdate {
	wu.mutation.AddItemIDs(ids...)
	return wu
}

// AddItems adds the "items" edges to the WishlistItem entity.
func (wu *WishlistUpdate) AddItems(w ...*WishlistItem) *WishlistUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddItemIDs(ids...)
}

// Mutation returns the WishlistMutation object of the builder.
func (wu *WishlistUpdate) Mutation() *WishlistMutation {
	return wu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wu *WishlistUpdate) ClearUser() *WishlistUpdate {
	wu.mutation.ClearUser()
	return wu
}

// ClearItems clears all "items" edges to the WishlistItem entity.
func (wu *WishlistUpdate) ClearItems() *WishlistUpdate {
	wu.mutation.ClearItems()
	return wu
}

// RemoveItemIDs removes the "items" edge to WishlistItem entities by IDs.
func (wu *WishlistUpdate) RemoveItemIDs(ids ...int) *WishlistUpdate {
	wu.mutation.RemoveItemIDs(ids...)
	return wu
}

// RemoveItems removes "items" edges to WishlistItem entities.
func (wu *WishlistUpdate) RemoveItems(w ...*WishlistItem) *WishlistUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WishlistUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WishlistUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WishlistUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WishlistUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WishlistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(wishlist.Table, wishlist.Columns, sqlgraph.NewFieldSpec(wishlist.FieldID, field.TypeUint64))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.CreatedAt(); ok {
		_spec.SetField(wishlist.FieldCreatedAt, field.TypeTime, value)
	}
	if wu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlist.UserTable,
			Columns: []string{wishlist.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlist.UserTable,
			Columns: []string{wishlist.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wishlist.ItemsTable,
			Columns: []string{wishlist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !wu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wishlist.ItemsTable,
			Columns: []string{wishlist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wishlist.ItemsTable,
			Columns: []string{wishlist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wishlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WishlistUpdateOne is the builder for updating a single Wishlist entity.
type WishlistUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WishlistMutation
}

// SetCreatedAt sets the "created_at" field.
func (wuo *WishlistUpdateOne) SetCreatedAt(t time.Time) *WishlistUpdateOne {
	wuo.mutation.SetCreatedAt(t)
	return wuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wuo *WishlistUpdateOne) SetNillableCreatedAt(t *time.Time) *WishlistUpdateOne {
	if t != nil {
		wuo.SetCreatedAt(*t)
	}
	return wuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (wuo *WishlistUpdateOne) SetUserID(id uint64) *WishlistUpdateOne {
	wuo.mutation.SetUserID(id)
	return wuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (wuo *WishlistUpdateOne) SetNillableUserID(id *uint64) *WishlistUpdateOne {
	if id != nil {
		wuo = wuo.SetUserID(*id)
	}
	return wuo
}

// SetUser sets the "user" edge to the User entity.
func (wuo *WishlistUpdateOne) SetUser(u *User) *WishlistUpdateOne {
	return wuo.SetUserID(u.ID)
}

// AddItemIDs adds the "items" edge to the WishlistItem entity by IDs.
func (wuo *WishlistUpdateOne) AddItemIDs(ids ...int) *WishlistUpdateOne {
	wuo.mutation.AddItemIDs(ids...)
	return wuo
}

// AddItems adds the "items" edges to the WishlistItem entity.
func (wuo *WishlistUpdateOne) AddItems(w ...*WishlistItem) *WishlistUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddItemIDs(ids...)
}

// Mutation returns the WishlistMutation object of the builder.
func (wuo *WishlistUpdateOne) Mutation() *WishlistMutation {
	return wuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wuo *WishlistUpdateOne) ClearUser() *WishlistUpdateOne {
	wuo.mutation.ClearUser()
	return wuo
}

// ClearItems clears all "items" edges to the WishlistItem entity.
func (wuo *WishlistUpdateOne) ClearItems() *WishlistUpdateOne {
	wuo.mutation.ClearItems()
	return wuo
}

// RemoveItemIDs removes the "items" edge to WishlistItem entities by IDs.
func (wuo *WishlistUpdateOne) RemoveItemIDs(ids ...int) *WishlistUpdateOne {
	wuo.mutation.RemoveItemIDs(ids...)
	return wuo
}

// RemoveItems removes "items" edges to WishlistItem entities.
func (wuo *WishlistUpdateOne) RemoveItems(w ...*WishlistItem) *WishlistUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveItemIDs(ids...)
}

// Where appends a list predicates to the WishlistUpdate builder.
func (wuo *WishlistUpdateOne) Where(ps ...predicate.Wishlist) *WishlistUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WishlistUpdateOne) Select(field string, fields ...string) *WishlistUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Wishlist entity.
func (wuo *WishlistUpdateOne) Save(ctx context.Context) (*Wishlist, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WishlistUpdateOne) SaveX(ctx context.Context) *Wishlist {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WishlistUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WishlistUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WishlistUpdateOne) sqlSave(ctx context.Context) (_node *Wishlist, err error) {
	_spec := sqlgraph.NewUpdateSpec(wishlist.Table, wishlist.Columns, sqlgraph.NewFieldSpec(wishlist.FieldID, field.TypeUint64))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Wishlist.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wishlist.FieldID)
		for _, f := range fields {
			if !wishlist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != wishlist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.CreatedAt(); ok {
		_spec.SetField(wishlist.FieldCreatedAt, field.TypeTime, value)
	}
	if wuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlist.UserTable,
			Columns: []string{wishlist.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlist.UserTable,
			Columns: []string{wishlist.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wishlist.ItemsTable,
			Columns: []string{wishlist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !wuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wishlist.ItemsTable,
			Columns: []string{wishlist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wishlist.ItemsTable,
			Columns: []string{wishlist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Wishlist{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wishlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
