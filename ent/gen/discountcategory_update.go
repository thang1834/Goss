// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/category"
	"github.com/thang1834/go-goss/ent/gen/discount"
	"github.com/thang1834/go-goss/ent/gen/discountcategory"
	"github.com/thang1834/go-goss/ent/gen/predicate"
)

// DiscountCategoryUpdate is the builder for updating DiscountCategory entities.
type DiscountCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *DiscountCategoryMutation
}

// Where appends a list predicates to the DiscountCategoryUpdate builder.
func (dcu *DiscountCategoryUpdate) Where(ps ...predicate.DiscountCategory) *DiscountCategoryUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetDiscountID sets the "discount" edge to the Discount entity by ID.
func (dcu *DiscountCategoryUpdate) SetDiscountID(id uint64) *DiscountCategoryUpdate {
	dcu.mutation.SetDiscountID(id)
	return dcu
}

// SetNillableDiscountID sets the "discount" edge to the Discount entity by ID if the given value is not nil.
func (dcu *DiscountCategoryUpdate) SetNillableDiscountID(id *uint64) *DiscountCategoryUpdate {
	if id != nil {
		dcu = dcu.SetDiscountID(*id)
	}
	return dcu
}

// SetDiscount sets the "discount" edge to the Discount entity.
func (dcu *DiscountCategoryUpdate) SetDiscount(d *Discount) *DiscountCategoryUpdate {
	return dcu.SetDiscountID(d.ID)
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (dcu *DiscountCategoryUpdate) SetCategoryID(id uint64) *DiscountCategoryUpdate {
	dcu.mutation.SetCategoryID(id)
	return dcu
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (dcu *DiscountCategoryUpdate) SetNillableCategoryID(id *uint64) *DiscountCategoryUpdate {
	if id != nil {
		dcu = dcu.SetCategoryID(*id)
	}
	return dcu
}

// SetCategory sets the "category" edge to the Category entity.
func (dcu *DiscountCategoryUpdate) SetCategory(c *Category) *DiscountCategoryUpdate {
	return dcu.SetCategoryID(c.ID)
}

// Mutation returns the DiscountCategoryMutation object of the builder.
func (dcu *DiscountCategoryUpdate) Mutation() *DiscountCategoryMutation {
	return dcu.mutation
}

// ClearDiscount clears the "discount" edge to the Discount entity.
func (dcu *DiscountCategoryUpdate) ClearDiscount() *DiscountCategoryUpdate {
	dcu.mutation.ClearDiscount()
	return dcu
}

// ClearCategory clears the "category" edge to the Category entity.
func (dcu *DiscountCategoryUpdate) ClearCategory() *DiscountCategoryUpdate {
	dcu.mutation.ClearCategory()
	return dcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DiscountCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dcu.sqlSave, dcu.mutation, dcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DiscountCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DiscountCategoryUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DiscountCategoryUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcu *DiscountCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(discountcategory.Table, discountcategory.Columns, sqlgraph.NewFieldSpec(discountcategory.FieldID, field.TypeInt))
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dcu.mutation.DiscountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountcategory.DiscountTable,
			Columns: []string{discountcategory.DiscountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.DiscountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountcategory.DiscountTable,
			Columns: []string{discountcategory.DiscountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountcategory.CategoryTable,
			Columns: []string{discountcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountcategory.CategoryTable,
			Columns: []string{discountcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discountcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcu.mutation.done = true
	return n, nil
}

// DiscountCategoryUpdateOne is the builder for updating a single DiscountCategory entity.
type DiscountCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscountCategoryMutation
}

// SetDiscountID sets the "discount" edge to the Discount entity by ID.
func (dcuo *DiscountCategoryUpdateOne) SetDiscountID(id uint64) *DiscountCategoryUpdateOne {
	dcuo.mutation.SetDiscountID(id)
	return dcuo
}

// SetNillableDiscountID sets the "discount" edge to the Discount entity by ID if the given value is not nil.
func (dcuo *DiscountCategoryUpdateOne) SetNillableDiscountID(id *uint64) *DiscountCategoryUpdateOne {
	if id != nil {
		dcuo = dcuo.SetDiscountID(*id)
	}
	return dcuo
}

// SetDiscount sets the "discount" edge to the Discount entity.
func (dcuo *DiscountCategoryUpdateOne) SetDiscount(d *Discount) *DiscountCategoryUpdateOne {
	return dcuo.SetDiscountID(d.ID)
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (dcuo *DiscountCategoryUpdateOne) SetCategoryID(id uint64) *DiscountCategoryUpdateOne {
	dcuo.mutation.SetCategoryID(id)
	return dcuo
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (dcuo *DiscountCategoryUpdateOne) SetNillableCategoryID(id *uint64) *DiscountCategoryUpdateOne {
	if id != nil {
		dcuo = dcuo.SetCategoryID(*id)
	}
	return dcuo
}

// SetCategory sets the "category" edge to the Category entity.
func (dcuo *DiscountCategoryUpdateOne) SetCategory(c *Category) *DiscountCategoryUpdateOne {
	return dcuo.SetCategoryID(c.ID)
}

// Mutation returns the DiscountCategoryMutation object of the builder.
func (dcuo *DiscountCategoryUpdateOne) Mutation() *DiscountCategoryMutation {
	return dcuo.mutation
}

// ClearDiscount clears the "discount" edge to the Discount entity.
func (dcuo *DiscountCategoryUpdateOne) ClearDiscount() *DiscountCategoryUpdateOne {
	dcuo.mutation.ClearDiscount()
	return dcuo
}

// ClearCategory clears the "category" edge to the Category entity.
func (dcuo *DiscountCategoryUpdateOne) ClearCategory() *DiscountCategoryUpdateOne {
	dcuo.mutation.ClearCategory()
	return dcuo
}

// Where appends a list predicates to the DiscountCategoryUpdate builder.
func (dcuo *DiscountCategoryUpdateOne) Where(ps ...predicate.DiscountCategory) *DiscountCategoryUpdateOne {
	dcuo.mutation.Where(ps...)
	return dcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DiscountCategoryUpdateOne) Select(field string, fields ...string) *DiscountCategoryUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DiscountCategory entity.
func (dcuo *DiscountCategoryUpdateOne) Save(ctx context.Context) (*DiscountCategory, error) {
	return withHooks(ctx, dcuo.sqlSave, dcuo.mutation, dcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DiscountCategoryUpdateOne) SaveX(ctx context.Context) *DiscountCategory {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DiscountCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DiscountCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcuo *DiscountCategoryUpdateOne) sqlSave(ctx context.Context) (_node *DiscountCategory, err error) {
	_spec := sqlgraph.NewUpdateSpec(discountcategory.Table, discountcategory.Columns, sqlgraph.NewFieldSpec(discountcategory.FieldID, field.TypeInt))
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "DiscountCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discountcategory.FieldID)
		for _, f := range fields {
			if !discountcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != discountcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dcuo.mutation.DiscountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountcategory.DiscountTable,
			Columns: []string{discountcategory.DiscountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.DiscountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountcategory.DiscountTable,
			Columns: []string{discountcategory.DiscountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountcategory.CategoryTable,
			Columns: []string{discountcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountcategory.CategoryTable,
			Columns: []string{discountcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DiscountCategory{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discountcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcuo.mutation.done = true
	return _node, nil
}
