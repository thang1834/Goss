// Code generated by ent, DO NOT EDIT.

package userpermission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/thang1834/go-goss/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldEQ(FieldUserID, v))
}

// PermissionID applies equality check predicate on the "permission_id" field. It's identical to PermissionIDEQ.
func PermissionID(v uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldEQ(FieldPermissionID, v))
}

// GrantedBy applies equality check predicate on the "granted_by" field. It's identical to GrantedByEQ.
func GrantedBy(v uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldEQ(FieldGrantedBy, v))
}

// GrantedAt applies equality check predicate on the "granted_at" field. It's identical to GrantedAtEQ.
func GrantedAt(v time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldEQ(FieldGrantedAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldEQ(FieldExpiresAt, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldEQ(FieldIsActive, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldNotIn(FieldUserID, vs...))
}

// PermissionIDEQ applies the EQ predicate on the "permission_id" field.
func PermissionIDEQ(v uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldEQ(FieldPermissionID, v))
}

// PermissionIDNEQ applies the NEQ predicate on the "permission_id" field.
func PermissionIDNEQ(v uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldNEQ(FieldPermissionID, v))
}

// PermissionIDIn applies the In predicate on the "permission_id" field.
func PermissionIDIn(vs ...uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldIn(FieldPermissionID, vs...))
}

// PermissionIDNotIn applies the NotIn predicate on the "permission_id" field.
func PermissionIDNotIn(vs ...uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldNotIn(FieldPermissionID, vs...))
}

// GrantedByEQ applies the EQ predicate on the "granted_by" field.
func GrantedByEQ(v uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldEQ(FieldGrantedBy, v))
}

// GrantedByNEQ applies the NEQ predicate on the "granted_by" field.
func GrantedByNEQ(v uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldNEQ(FieldGrantedBy, v))
}

// GrantedByIn applies the In predicate on the "granted_by" field.
func GrantedByIn(vs ...uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldIn(FieldGrantedBy, vs...))
}

// GrantedByNotIn applies the NotIn predicate on the "granted_by" field.
func GrantedByNotIn(vs ...uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldNotIn(FieldGrantedBy, vs...))
}

// GrantedByGT applies the GT predicate on the "granted_by" field.
func GrantedByGT(v uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldGT(FieldGrantedBy, v))
}

// GrantedByGTE applies the GTE predicate on the "granted_by" field.
func GrantedByGTE(v uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldGTE(FieldGrantedBy, v))
}

// GrantedByLT applies the LT predicate on the "granted_by" field.
func GrantedByLT(v uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldLT(FieldGrantedBy, v))
}

// GrantedByLTE applies the LTE predicate on the "granted_by" field.
func GrantedByLTE(v uint64) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldLTE(FieldGrantedBy, v))
}

// GrantedAtEQ applies the EQ predicate on the "granted_at" field.
func GrantedAtEQ(v time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldEQ(FieldGrantedAt, v))
}

// GrantedAtNEQ applies the NEQ predicate on the "granted_at" field.
func GrantedAtNEQ(v time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldNEQ(FieldGrantedAt, v))
}

// GrantedAtIn applies the In predicate on the "granted_at" field.
func GrantedAtIn(vs ...time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldIn(FieldGrantedAt, vs...))
}

// GrantedAtNotIn applies the NotIn predicate on the "granted_at" field.
func GrantedAtNotIn(vs ...time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldNotIn(FieldGrantedAt, vs...))
}

// GrantedAtGT applies the GT predicate on the "granted_at" field.
func GrantedAtGT(v time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldGT(FieldGrantedAt, v))
}

// GrantedAtGTE applies the GTE predicate on the "granted_at" field.
func GrantedAtGTE(v time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldGTE(FieldGrantedAt, v))
}

// GrantedAtLT applies the LT predicate on the "granted_at" field.
func GrantedAtLT(v time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldLT(FieldGrantedAt, v))
}

// GrantedAtLTE applies the LTE predicate on the "granted_at" field.
func GrantedAtLTE(v time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldLTE(FieldGrantedAt, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.UserPermission {
	return predicate.UserPermission(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.UserPermission {
	return predicate.UserPermission(sql.FieldNotNull(FieldExpiresAt))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.UserPermission {
	return predicate.UserPermission(sql.FieldNEQ(FieldIsActive, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserPermission {
	return predicate.UserPermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserPermission {
	return predicate.UserPermission(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPermission applies the HasEdge predicate on the "permission" edge.
func HasPermission() predicate.UserPermission {
	return predicate.UserPermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PermissionTable, PermissionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionWith applies the HasEdge predicate on the "permission" edge with a given conditions (other predicates).
func HasPermissionWith(preds ...predicate.Permission) predicate.UserPermission {
	return predicate.UserPermission(func(s *sql.Selector) {
		step := newPermissionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserPermission) predicate.UserPermission {
	return predicate.UserPermission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserPermission) predicate.UserPermission {
	return predicate.UserPermission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserPermission) predicate.UserPermission {
	return predicate.UserPermission(sql.NotPredicates(p))
}
