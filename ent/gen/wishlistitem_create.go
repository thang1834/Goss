// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/product"
	"github.com/thang1834/go-goss/ent/gen/wishlist"
	"github.com/thang1834/go-goss/ent/gen/wishlistitem"
)

// WishlistItemCreate is the builder for creating a WishlistItem entity.
type WishlistItemCreate struct {
	config
	mutation *WishlistItemMutation
	hooks    []Hook
}

// SetAddedAt sets the "added_at" field.
func (wic *WishlistItemCreate) SetAddedAt(t time.Time) *WishlistItemCreate {
	wic.mutation.SetAddedAt(t)
	return wic
}

// SetNillableAddedAt sets the "added_at" field if the given value is not nil.
func (wic *WishlistItemCreate) SetNillableAddedAt(t *time.Time) *WishlistItemCreate {
	if t != nil {
		wic.SetAddedAt(*t)
	}
	return wic
}

// SetWishlistID sets the "wishlist" edge to the Wishlist entity by ID.
func (wic *WishlistItemCreate) SetWishlistID(id uint64) *WishlistItemCreate {
	wic.mutation.SetWishlistID(id)
	return wic
}

// SetNillableWishlistID sets the "wishlist" edge to the Wishlist entity by ID if the given value is not nil.
func (wic *WishlistItemCreate) SetNillableWishlistID(id *uint64) *WishlistItemCreate {
	if id != nil {
		wic = wic.SetWishlistID(*id)
	}
	return wic
}

// SetWishlist sets the "wishlist" edge to the Wishlist entity.
func (wic *WishlistItemCreate) SetWishlist(w *Wishlist) *WishlistItemCreate {
	return wic.SetWishlistID(w.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (wic *WishlistItemCreate) SetProductID(id uint64) *WishlistItemCreate {
	wic.mutation.SetProductID(id)
	return wic
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (wic *WishlistItemCreate) SetNillableProductID(id *uint64) *WishlistItemCreate {
	if id != nil {
		wic = wic.SetProductID(*id)
	}
	return wic
}

// SetProduct sets the "product" edge to the Product entity.
func (wic *WishlistItemCreate) SetProduct(p *Product) *WishlistItemCreate {
	return wic.SetProductID(p.ID)
}

// Mutation returns the WishlistItemMutation object of the builder.
func (wic *WishlistItemCreate) Mutation() *WishlistItemMutation {
	return wic.mutation
}

// Save creates the WishlistItem in the database.
func (wic *WishlistItemCreate) Save(ctx context.Context) (*WishlistItem, error) {
	wic.defaults()
	return withHooks(ctx, wic.sqlSave, wic.mutation, wic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wic *WishlistItemCreate) SaveX(ctx context.Context) *WishlistItem {
	v, err := wic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wic *WishlistItemCreate) Exec(ctx context.Context) error {
	_, err := wic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wic *WishlistItemCreate) ExecX(ctx context.Context) {
	if err := wic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wic *WishlistItemCreate) defaults() {
	if _, ok := wic.mutation.AddedAt(); !ok {
		v := wishlistitem.DefaultAddedAt()
		wic.mutation.SetAddedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wic *WishlistItemCreate) check() error {
	if _, ok := wic.mutation.AddedAt(); !ok {
		return &ValidationError{Name: "added_at", err: errors.New(`gen: missing required field "WishlistItem.added_at"`)}
	}
	return nil
}

func (wic *WishlistItemCreate) sqlSave(ctx context.Context) (*WishlistItem, error) {
	if err := wic.check(); err != nil {
		return nil, err
	}
	_node, _spec := wic.createSpec()
	if err := sqlgraph.CreateNode(ctx, wic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wic.mutation.id = &_node.ID
	wic.mutation.done = true
	return _node, nil
}

func (wic *WishlistItemCreate) createSpec() (*WishlistItem, *sqlgraph.CreateSpec) {
	var (
		_node = &WishlistItem{config: wic.config}
		_spec = sqlgraph.NewCreateSpec(wishlistitem.Table, sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt))
	)
	if value, ok := wic.mutation.AddedAt(); ok {
		_spec.SetField(wishlistitem.FieldAddedAt, field.TypeTime, value)
		_node.AddedAt = value
	}
	if nodes := wic.mutation.WishlistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlistitem.WishlistTable,
			Columns: []string{wishlistitem.WishlistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlist.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.wishlist_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wic.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlistitem.ProductTable,
			Columns: []string{wishlistitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_wishlist_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WishlistItemCreateBulk is the builder for creating many WishlistItem entities in bulk.
type WishlistItemCreateBulk struct {
	config
	err      error
	builders []*WishlistItemCreate
}

// Save creates the WishlistItem entities in the database.
func (wicb *WishlistItemCreateBulk) Save(ctx context.Context) ([]*WishlistItem, error) {
	if wicb.err != nil {
		return nil, wicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wicb.builders))
	nodes := make([]*WishlistItem, len(wicb.builders))
	mutators := make([]Mutator, len(wicb.builders))
	for i := range wicb.builders {
		func(i int, root context.Context) {
			builder := wicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WishlistItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wicb *WishlistItemCreateBulk) SaveX(ctx context.Context) []*WishlistItem {
	v, err := wicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wicb *WishlistItemCreateBulk) Exec(ctx context.Context) error {
	_, err := wicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wicb *WishlistItemCreateBulk) ExecX(ctx context.Context) {
	if err := wicb.Exec(ctx); err != nil {
		panic(err)
	}
}
