// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/product"
	"github.com/thang1834/go-goss/ent/gen/productimage"
)

// ProductImageCreate is the builder for creating a ProductImage entity.
type ProductImageCreate struct {
	config
	mutation *ProductImageMutation
	hooks    []Hook
}

// SetImageURL sets the "image_url" field.
func (pic *ProductImageCreate) SetImageURL(s string) *ProductImageCreate {
	pic.mutation.SetImageURL(s)
	return pic
}

// SetIsPrimary sets the "is_primary" field.
func (pic *ProductImageCreate) SetIsPrimary(b bool) *ProductImageCreate {
	pic.mutation.SetIsPrimary(b)
	return pic
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (pic *ProductImageCreate) SetNillableIsPrimary(b *bool) *ProductImageCreate {
	if b != nil {
		pic.SetIsPrimary(*b)
	}
	return pic
}

// SetID sets the "id" field.
func (pic *ProductImageCreate) SetID(u uint64) *ProductImageCreate {
	pic.mutation.SetID(u)
	return pic
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (pic *ProductImageCreate) SetProductID(id uint64) *ProductImageCreate {
	pic.mutation.SetProductID(id)
	return pic
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (pic *ProductImageCreate) SetNillableProductID(id *uint64) *ProductImageCreate {
	if id != nil {
		pic = pic.SetProductID(*id)
	}
	return pic
}

// SetProduct sets the "product" edge to the Product entity.
func (pic *ProductImageCreate) SetProduct(p *Product) *ProductImageCreate {
	return pic.SetProductID(p.ID)
}

// Mutation returns the ProductImageMutation object of the builder.
func (pic *ProductImageCreate) Mutation() *ProductImageMutation {
	return pic.mutation
}

// Save creates the ProductImage in the database.
func (pic *ProductImageCreate) Save(ctx context.Context) (*ProductImage, error) {
	pic.defaults()
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *ProductImageCreate) SaveX(ctx context.Context) *ProductImage {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *ProductImageCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *ProductImageCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *ProductImageCreate) defaults() {
	if _, ok := pic.mutation.IsPrimary(); !ok {
		v := productimage.DefaultIsPrimary
		pic.mutation.SetIsPrimary(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *ProductImageCreate) check() error {
	if _, ok := pic.mutation.ImageURL(); !ok {
		return &ValidationError{Name: "image_url", err: errors.New(`gen: missing required field "ProductImage.image_url"`)}
	}
	if _, ok := pic.mutation.IsPrimary(); !ok {
		return &ValidationError{Name: "is_primary", err: errors.New(`gen: missing required field "ProductImage.is_primary"`)}
	}
	return nil
}

func (pic *ProductImageCreate) sqlSave(ctx context.Context) (*ProductImage, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *ProductImageCreate) createSpec() (*ProductImage, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductImage{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(productimage.Table, sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeUint64))
	)
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pic.mutation.ImageURL(); ok {
		_spec.SetField(productimage.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := pic.mutation.IsPrimary(); ok {
		_spec.SetField(productimage.FieldIsPrimary, field.TypeBool, value)
		_node.IsPrimary = value
	}
	if nodes := pic.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productimage.ProductTable,
			Columns: []string{productimage.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_images = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductImageCreateBulk is the builder for creating many ProductImage entities in bulk.
type ProductImageCreateBulk struct {
	config
	err      error
	builders []*ProductImageCreate
}

// Save creates the ProductImage entities in the database.
func (picb *ProductImageCreateBulk) Save(ctx context.Context) ([]*ProductImage, error) {
	if picb.err != nil {
		return nil, picb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*ProductImage, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *ProductImageCreateBulk) SaveX(ctx context.Context) []*ProductImage {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *ProductImageCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *ProductImageCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
