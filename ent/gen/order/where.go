// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/thang1834/go-goss/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// TotalPrice applies equality check predicate on the "total_price" field. It's identical to TotalPriceEQ.
func TotalPrice(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotalPrice, v))
}

// PaymentMethod applies equality check predicate on the "payment_method" field. It's identical to PaymentMethodEQ.
func PaymentMethod(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPaymentMethod, v))
}

// ShippingAddress applies equality check predicate on the "shipping_address" field. It's identical to ShippingAddressEQ.
func ShippingAddress(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldShippingAddress, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldStatus, v))
}

// TotalPriceEQ applies the EQ predicate on the "total_price" field.
func TotalPriceEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotalPrice, v))
}

// TotalPriceNEQ applies the NEQ predicate on the "total_price" field.
func TotalPriceNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTotalPrice, v))
}

// TotalPriceIn applies the In predicate on the "total_price" field.
func TotalPriceIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTotalPrice, vs...))
}

// TotalPriceNotIn applies the NotIn predicate on the "total_price" field.
func TotalPriceNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTotalPrice, vs...))
}

// TotalPriceGT applies the GT predicate on the "total_price" field.
func TotalPriceGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTotalPrice, v))
}

// TotalPriceGTE applies the GTE predicate on the "total_price" field.
func TotalPriceGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTotalPrice, v))
}

// TotalPriceLT applies the LT predicate on the "total_price" field.
func TotalPriceLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTotalPrice, v))
}

// TotalPriceLTE applies the LTE predicate on the "total_price" field.
func TotalPriceLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTotalPrice, v))
}

// PaymentMethodEQ applies the EQ predicate on the "payment_method" field.
func PaymentMethodEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPaymentMethod, v))
}

// PaymentMethodNEQ applies the NEQ predicate on the "payment_method" field.
func PaymentMethodNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPaymentMethod, v))
}

// PaymentMethodIn applies the In predicate on the "payment_method" field.
func PaymentMethodIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPaymentMethod, vs...))
}

// PaymentMethodNotIn applies the NotIn predicate on the "payment_method" field.
func PaymentMethodNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPaymentMethod, vs...))
}

// PaymentMethodGT applies the GT predicate on the "payment_method" field.
func PaymentMethodGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldPaymentMethod, v))
}

// PaymentMethodGTE applies the GTE predicate on the "payment_method" field.
func PaymentMethodGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldPaymentMethod, v))
}

// PaymentMethodLT applies the LT predicate on the "payment_method" field.
func PaymentMethodLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldPaymentMethod, v))
}

// PaymentMethodLTE applies the LTE predicate on the "payment_method" field.
func PaymentMethodLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldPaymentMethod, v))
}

// PaymentMethodContains applies the Contains predicate on the "payment_method" field.
func PaymentMethodContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldPaymentMethod, v))
}

// PaymentMethodHasPrefix applies the HasPrefix predicate on the "payment_method" field.
func PaymentMethodHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldPaymentMethod, v))
}

// PaymentMethodHasSuffix applies the HasSuffix predicate on the "payment_method" field.
func PaymentMethodHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldPaymentMethod, v))
}

// PaymentMethodIsNil applies the IsNil predicate on the "payment_method" field.
func PaymentMethodIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldPaymentMethod))
}

// PaymentMethodNotNil applies the NotNil predicate on the "payment_method" field.
func PaymentMethodNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldPaymentMethod))
}

// PaymentMethodEqualFold applies the EqualFold predicate on the "payment_method" field.
func PaymentMethodEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldPaymentMethod, v))
}

// PaymentMethodContainsFold applies the ContainsFold predicate on the "payment_method" field.
func PaymentMethodContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldPaymentMethod, v))
}

// ShippingAddressEQ applies the EQ predicate on the "shipping_address" field.
func ShippingAddressEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldShippingAddress, v))
}

// ShippingAddressNEQ applies the NEQ predicate on the "shipping_address" field.
func ShippingAddressNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldShippingAddress, v))
}

// ShippingAddressIn applies the In predicate on the "shipping_address" field.
func ShippingAddressIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldShippingAddress, vs...))
}

// ShippingAddressNotIn applies the NotIn predicate on the "shipping_address" field.
func ShippingAddressNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldShippingAddress, vs...))
}

// ShippingAddressGT applies the GT predicate on the "shipping_address" field.
func ShippingAddressGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldShippingAddress, v))
}

// ShippingAddressGTE applies the GTE predicate on the "shipping_address" field.
func ShippingAddressGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldShippingAddress, v))
}

// ShippingAddressLT applies the LT predicate on the "shipping_address" field.
func ShippingAddressLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldShippingAddress, v))
}

// ShippingAddressLTE applies the LTE predicate on the "shipping_address" field.
func ShippingAddressLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldShippingAddress, v))
}

// ShippingAddressContains applies the Contains predicate on the "shipping_address" field.
func ShippingAddressContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldShippingAddress, v))
}

// ShippingAddressHasPrefix applies the HasPrefix predicate on the "shipping_address" field.
func ShippingAddressHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldShippingAddress, v))
}

// ShippingAddressHasSuffix applies the HasSuffix predicate on the "shipping_address" field.
func ShippingAddressHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldShippingAddress, v))
}

// ShippingAddressIsNil applies the IsNil predicate on the "shipping_address" field.
func ShippingAddressIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldShippingAddress))
}

// ShippingAddressNotNil applies the NotNil predicate on the "shipping_address" field.
func ShippingAddressNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldShippingAddress))
}

// ShippingAddressEqualFold applies the EqualFold predicate on the "shipping_address" field.
func ShippingAddressEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldShippingAddress, v))
}

// ShippingAddressContainsFold applies the ContainsFold predicate on the "shipping_address" field.
func ShippingAddressContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldShippingAddress, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.OrderItem) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPayments applies the HasEdge predicate on the "payments" edge.
func HasPayments() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentsWith applies the HasEdge predicate on the "payments" edge with a given conditions (other predicates).
func HasPaymentsWith(preds ...predicate.Payment) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newPaymentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
