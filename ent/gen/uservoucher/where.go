// Code generated by ent, DO NOT EDIT.

package uservoucher

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/thang1834/go-goss/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldLTE(FieldID, id))
}

// IsUsed applies equality check predicate on the "is_used" field. It's identical to IsUsedEQ.
func IsUsed(v bool) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldEQ(FieldIsUsed, v))
}

// UsedAt applies equality check predicate on the "used_at" field. It's identical to UsedAtEQ.
func UsedAt(v time.Time) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldEQ(FieldUsedAt, v))
}

// IsUsedEQ applies the EQ predicate on the "is_used" field.
func IsUsedEQ(v bool) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldEQ(FieldIsUsed, v))
}

// IsUsedNEQ applies the NEQ predicate on the "is_used" field.
func IsUsedNEQ(v bool) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldNEQ(FieldIsUsed, v))
}

// UsedAtEQ applies the EQ predicate on the "used_at" field.
func UsedAtEQ(v time.Time) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldEQ(FieldUsedAt, v))
}

// UsedAtNEQ applies the NEQ predicate on the "used_at" field.
func UsedAtNEQ(v time.Time) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldNEQ(FieldUsedAt, v))
}

// UsedAtIn applies the In predicate on the "used_at" field.
func UsedAtIn(vs ...time.Time) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldIn(FieldUsedAt, vs...))
}

// UsedAtNotIn applies the NotIn predicate on the "used_at" field.
func UsedAtNotIn(vs ...time.Time) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldNotIn(FieldUsedAt, vs...))
}

// UsedAtGT applies the GT predicate on the "used_at" field.
func UsedAtGT(v time.Time) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldGT(FieldUsedAt, v))
}

// UsedAtGTE applies the GTE predicate on the "used_at" field.
func UsedAtGTE(v time.Time) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldGTE(FieldUsedAt, v))
}

// UsedAtLT applies the LT predicate on the "used_at" field.
func UsedAtLT(v time.Time) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldLT(FieldUsedAt, v))
}

// UsedAtLTE applies the LTE predicate on the "used_at" field.
func UsedAtLTE(v time.Time) predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldLTE(FieldUsedAt, v))
}

// UsedAtIsNil applies the IsNil predicate on the "used_at" field.
func UsedAtIsNil() predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldIsNull(FieldUsedAt))
}

// UsedAtNotNil applies the NotNil predicate on the "used_at" field.
func UsedAtNotNil() predicate.UserVoucher {
	return predicate.UserVoucher(sql.FieldNotNull(FieldUsedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserVoucher {
	return predicate.UserVoucher(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserVoucher {
	return predicate.UserVoucher(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDiscount applies the HasEdge predicate on the "discount" edge.
func HasDiscount() predicate.UserVoucher {
	return predicate.UserVoucher(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DiscountTable, DiscountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiscountWith applies the HasEdge predicate on the "discount" edge with a given conditions (other predicates).
func HasDiscountWith(preds ...predicate.Discount) predicate.UserVoucher {
	return predicate.UserVoucher(func(s *sql.Selector) {
		step := newDiscountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserVoucher) predicate.UserVoucher {
	return predicate.UserVoucher(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserVoucher) predicate.UserVoucher {
	return predicate.UserVoucher(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserVoucher) predicate.UserVoucher {
	return predicate.UserVoucher(sql.NotPredicates(p))
}
