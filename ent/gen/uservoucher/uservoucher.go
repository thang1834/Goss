// Code generated by ent, DO NOT EDIT.

package uservoucher

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the uservoucher type in the database.
	Label = "user_voucher"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIsUsed holds the string denoting the is_used field in the database.
	FieldIsUsed = "is_used"
	// FieldUsedAt holds the string denoting the used_at field in the database.
	FieldUsedAt = "used_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeDiscount holds the string denoting the discount edge name in mutations.
	EdgeDiscount = "discount"
	// Table holds the table name of the uservoucher in the database.
	Table = "user_vouchers"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_vouchers"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_vouchers"
	// DiscountTable is the table that holds the discount relation/edge.
	DiscountTable = "user_vouchers"
	// DiscountInverseTable is the table name for the Discount entity.
	// It exists in this package in order to avoid circular dependency with the "discount" package.
	DiscountInverseTable = "discounts"
	// DiscountColumn is the table column denoting the discount relation/edge.
	DiscountColumn = "discount_user_vouchers"
)

// Columns holds all SQL columns for uservoucher fields.
var Columns = []string{
	FieldID,
	FieldIsUsed,
	FieldUsedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_vouchers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"discount_user_vouchers",
	"user_vouchers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsUsed holds the default value on creation for the "is_used" field.
	DefaultIsUsed bool
)

// OrderOption defines the ordering options for the UserVoucher queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIsUsed orders the results by the is_used field.
func ByIsUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsUsed, opts...).ToFunc()
}

// ByUsedAt orders the results by the used_at field.
func ByUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByDiscountField orders the results by discount field.
func ByDiscountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiscountStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newDiscountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiscountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DiscountTable, DiscountColumn),
	)
}
