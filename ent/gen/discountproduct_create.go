// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/discount"
	"github.com/thang1834/go-goss/ent/gen/discountproduct"
	"github.com/thang1834/go-goss/ent/gen/product"
)

// DiscountProductCreate is the builder for creating a DiscountProduct entity.
type DiscountProductCreate struct {
	config
	mutation *DiscountProductMutation
	hooks    []Hook
}

// SetDiscountID sets the "discount" edge to the Discount entity by ID.
func (dpc *DiscountProductCreate) SetDiscountID(id uint64) *DiscountProductCreate {
	dpc.mutation.SetDiscountID(id)
	return dpc
}

// SetNillableDiscountID sets the "discount" edge to the Discount entity by ID if the given value is not nil.
func (dpc *DiscountProductCreate) SetNillableDiscountID(id *uint64) *DiscountProductCreate {
	if id != nil {
		dpc = dpc.SetDiscountID(*id)
	}
	return dpc
}

// SetDiscount sets the "discount" edge to the Discount entity.
func (dpc *DiscountProductCreate) SetDiscount(d *Discount) *DiscountProductCreate {
	return dpc.SetDiscountID(d.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (dpc *DiscountProductCreate) SetProductID(id uint64) *DiscountProductCreate {
	dpc.mutation.SetProductID(id)
	return dpc
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (dpc *DiscountProductCreate) SetNillableProductID(id *uint64) *DiscountProductCreate {
	if id != nil {
		dpc = dpc.SetProductID(*id)
	}
	return dpc
}

// SetProduct sets the "product" edge to the Product entity.
func (dpc *DiscountProductCreate) SetProduct(p *Product) *DiscountProductCreate {
	return dpc.SetProductID(p.ID)
}

// Mutation returns the DiscountProductMutation object of the builder.
func (dpc *DiscountProductCreate) Mutation() *DiscountProductMutation {
	return dpc.mutation
}

// Save creates the DiscountProduct in the database.
func (dpc *DiscountProductCreate) Save(ctx context.Context) (*DiscountProduct, error) {
	return withHooks(ctx, dpc.sqlSave, dpc.mutation, dpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dpc *DiscountProductCreate) SaveX(ctx context.Context) *DiscountProduct {
	v, err := dpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpc *DiscountProductCreate) Exec(ctx context.Context) error {
	_, err := dpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpc *DiscountProductCreate) ExecX(ctx context.Context) {
	if err := dpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpc *DiscountProductCreate) check() error {
	return nil
}

func (dpc *DiscountProductCreate) sqlSave(ctx context.Context) (*DiscountProduct, error) {
	if err := dpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dpc.mutation.id = &_node.ID
	dpc.mutation.done = true
	return _node, nil
}

func (dpc *DiscountProductCreate) createSpec() (*DiscountProduct, *sqlgraph.CreateSpec) {
	var (
		_node = &DiscountProduct{config: dpc.config}
		_spec = sqlgraph.NewCreateSpec(discountproduct.Table, sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt))
	)
	if nodes := dpc.mutation.DiscountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountproduct.DiscountTable,
			Columns: []string{discountproduct.DiscountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.discount_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountproduct.ProductTable,
			Columns: []string{discountproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_discounts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DiscountProductCreateBulk is the builder for creating many DiscountProduct entities in bulk.
type DiscountProductCreateBulk struct {
	config
	err      error
	builders []*DiscountProductCreate
}

// Save creates the DiscountProduct entities in the database.
func (dpcb *DiscountProductCreateBulk) Save(ctx context.Context) ([]*DiscountProduct, error) {
	if dpcb.err != nil {
		return nil, dpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dpcb.builders))
	nodes := make([]*DiscountProduct, len(dpcb.builders))
	mutators := make([]Mutator, len(dpcb.builders))
	for i := range dpcb.builders {
		func(i int, root context.Context) {
			builder := dpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DiscountProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dpcb *DiscountProductCreateBulk) SaveX(ctx context.Context) []*DiscountProduct {
	v, err := dpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpcb *DiscountProductCreateBulk) Exec(ctx context.Context) error {
	_, err := dpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpcb *DiscountProductCreateBulk) ExecX(ctx context.Context) {
	if err := dpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
