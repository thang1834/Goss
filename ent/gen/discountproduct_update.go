// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/discount"
	"github.com/thang1834/go-goss/ent/gen/discountproduct"
	"github.com/thang1834/go-goss/ent/gen/predicate"
	"github.com/thang1834/go-goss/ent/gen/product"
)

// DiscountProductUpdate is the builder for updating DiscountProduct entities.
type DiscountProductUpdate struct {
	config
	hooks    []Hook
	mutation *DiscountProductMutation
}

// Where appends a list predicates to the DiscountProductUpdate builder.
func (dpu *DiscountProductUpdate) Where(ps ...predicate.DiscountProduct) *DiscountProductUpdate {
	dpu.mutation.Where(ps...)
	return dpu
}

// SetDiscountID sets the "discount" edge to the Discount entity by ID.
func (dpu *DiscountProductUpdate) SetDiscountID(id uint64) *DiscountProductUpdate {
	dpu.mutation.SetDiscountID(id)
	return dpu
}

// SetNillableDiscountID sets the "discount" edge to the Discount entity by ID if the given value is not nil.
func (dpu *DiscountProductUpdate) SetNillableDiscountID(id *uint64) *DiscountProductUpdate {
	if id != nil {
		dpu = dpu.SetDiscountID(*id)
	}
	return dpu
}

// SetDiscount sets the "discount" edge to the Discount entity.
func (dpu *DiscountProductUpdate) SetDiscount(d *Discount) *DiscountProductUpdate {
	return dpu.SetDiscountID(d.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (dpu *DiscountProductUpdate) SetProductID(id uint64) *DiscountProductUpdate {
	dpu.mutation.SetProductID(id)
	return dpu
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (dpu *DiscountProductUpdate) SetNillableProductID(id *uint64) *DiscountProductUpdate {
	if id != nil {
		dpu = dpu.SetProductID(*id)
	}
	return dpu
}

// SetProduct sets the "product" edge to the Product entity.
func (dpu *DiscountProductUpdate) SetProduct(p *Product) *DiscountProductUpdate {
	return dpu.SetProductID(p.ID)
}

// Mutation returns the DiscountProductMutation object of the builder.
func (dpu *DiscountProductUpdate) Mutation() *DiscountProductMutation {
	return dpu.mutation
}

// ClearDiscount clears the "discount" edge to the Discount entity.
func (dpu *DiscountProductUpdate) ClearDiscount() *DiscountProductUpdate {
	dpu.mutation.ClearDiscount()
	return dpu
}

// ClearProduct clears the "product" edge to the Product entity.
func (dpu *DiscountProductUpdate) ClearProduct() *DiscountProductUpdate {
	dpu.mutation.ClearProduct()
	return dpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dpu *DiscountProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dpu.sqlSave, dpu.mutation, dpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dpu *DiscountProductUpdate) SaveX(ctx context.Context) int {
	affected, err := dpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dpu *DiscountProductUpdate) Exec(ctx context.Context) error {
	_, err := dpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpu *DiscountProductUpdate) ExecX(ctx context.Context) {
	if err := dpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dpu *DiscountProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(discountproduct.Table, discountproduct.Columns, sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt))
	if ps := dpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dpu.mutation.DiscountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountproduct.DiscountTable,
			Columns: []string{discountproduct.DiscountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.DiscountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountproduct.DiscountTable,
			Columns: []string{discountproduct.DiscountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountproduct.ProductTable,
			Columns: []string{discountproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountproduct.ProductTable,
			Columns: []string{discountproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discountproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dpu.mutation.done = true
	return n, nil
}

// DiscountProductUpdateOne is the builder for updating a single DiscountProduct entity.
type DiscountProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscountProductMutation
}

// SetDiscountID sets the "discount" edge to the Discount entity by ID.
func (dpuo *DiscountProductUpdateOne) SetDiscountID(id uint64) *DiscountProductUpdateOne {
	dpuo.mutation.SetDiscountID(id)
	return dpuo
}

// SetNillableDiscountID sets the "discount" edge to the Discount entity by ID if the given value is not nil.
func (dpuo *DiscountProductUpdateOne) SetNillableDiscountID(id *uint64) *DiscountProductUpdateOne {
	if id != nil {
		dpuo = dpuo.SetDiscountID(*id)
	}
	return dpuo
}

// SetDiscount sets the "discount" edge to the Discount entity.
func (dpuo *DiscountProductUpdateOne) SetDiscount(d *Discount) *DiscountProductUpdateOne {
	return dpuo.SetDiscountID(d.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (dpuo *DiscountProductUpdateOne) SetProductID(id uint64) *DiscountProductUpdateOne {
	dpuo.mutation.SetProductID(id)
	return dpuo
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (dpuo *DiscountProductUpdateOne) SetNillableProductID(id *uint64) *DiscountProductUpdateOne {
	if id != nil {
		dpuo = dpuo.SetProductID(*id)
	}
	return dpuo
}

// SetProduct sets the "product" edge to the Product entity.
func (dpuo *DiscountProductUpdateOne) SetProduct(p *Product) *DiscountProductUpdateOne {
	return dpuo.SetProductID(p.ID)
}

// Mutation returns the DiscountProductMutation object of the builder.
func (dpuo *DiscountProductUpdateOne) Mutation() *DiscountProductMutation {
	return dpuo.mutation
}

// ClearDiscount clears the "discount" edge to the Discount entity.
func (dpuo *DiscountProductUpdateOne) ClearDiscount() *DiscountProductUpdateOne {
	dpuo.mutation.ClearDiscount()
	return dpuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (dpuo *DiscountProductUpdateOne) ClearProduct() *DiscountProductUpdateOne {
	dpuo.mutation.ClearProduct()
	return dpuo
}

// Where appends a list predicates to the DiscountProductUpdate builder.
func (dpuo *DiscountProductUpdateOne) Where(ps ...predicate.DiscountProduct) *DiscountProductUpdateOne {
	dpuo.mutation.Where(ps...)
	return dpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dpuo *DiscountProductUpdateOne) Select(field string, fields ...string) *DiscountProductUpdateOne {
	dpuo.fields = append([]string{field}, fields...)
	return dpuo
}

// Save executes the query and returns the updated DiscountProduct entity.
func (dpuo *DiscountProductUpdateOne) Save(ctx context.Context) (*DiscountProduct, error) {
	return withHooks(ctx, dpuo.sqlSave, dpuo.mutation, dpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dpuo *DiscountProductUpdateOne) SaveX(ctx context.Context) *DiscountProduct {
	node, err := dpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dpuo *DiscountProductUpdateOne) Exec(ctx context.Context) error {
	_, err := dpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpuo *DiscountProductUpdateOne) ExecX(ctx context.Context) {
	if err := dpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dpuo *DiscountProductUpdateOne) sqlSave(ctx context.Context) (_node *DiscountProduct, err error) {
	_spec := sqlgraph.NewUpdateSpec(discountproduct.Table, discountproduct.Columns, sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt))
	id, ok := dpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "DiscountProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discountproduct.FieldID)
		for _, f := range fields {
			if !discountproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != discountproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dpuo.mutation.DiscountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountproduct.DiscountTable,
			Columns: []string{discountproduct.DiscountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.DiscountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountproduct.DiscountTable,
			Columns: []string{discountproduct.DiscountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountproduct.ProductTable,
			Columns: []string{discountproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discountproduct.ProductTable,
			Columns: []string{discountproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DiscountProduct{config: dpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discountproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dpuo.mutation.done = true
	return _node, nil
}
