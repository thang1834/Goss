// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/permission"
	"github.com/thang1834/go-goss/ent/gen/predicate"
	"github.com/thang1834/go-goss/ent/gen/user"
	"github.com/thang1834/go-goss/ent/gen/userpermission"
)

// UserPermissionUpdate is the builder for updating UserPermission entities.
type UserPermissionUpdate struct {
	config
	hooks    []Hook
	mutation *UserPermissionMutation
}

// Where appends a list predicates to the UserPermissionUpdate builder.
func (upu *UserPermissionUpdate) Where(ps ...predicate.UserPermission) *UserPermissionUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetUserID sets the "user_id" field.
func (upu *UserPermissionUpdate) SetUserID(u uint64) *UserPermissionUpdate {
	upu.mutation.SetUserID(u)
	return upu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableUserID(u *uint64) *UserPermissionUpdate {
	if u != nil {
		upu.SetUserID(*u)
	}
	return upu
}

// SetPermissionID sets the "permission_id" field.
func (upu *UserPermissionUpdate) SetPermissionID(u uint64) *UserPermissionUpdate {
	upu.mutation.SetPermissionID(u)
	return upu
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillablePermissionID(u *uint64) *UserPermissionUpdate {
	if u != nil {
		upu.SetPermissionID(*u)
	}
	return upu
}

// SetGrantedBy sets the "granted_by" field.
func (upu *UserPermissionUpdate) SetGrantedBy(u uint64) *UserPermissionUpdate {
	upu.mutation.ResetGrantedBy()
	upu.mutation.SetGrantedBy(u)
	return upu
}

// SetNillableGrantedBy sets the "granted_by" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableGrantedBy(u *uint64) *UserPermissionUpdate {
	if u != nil {
		upu.SetGrantedBy(*u)
	}
	return upu
}

// AddGrantedBy adds u to the "granted_by" field.
func (upu *UserPermissionUpdate) AddGrantedBy(u int64) *UserPermissionUpdate {
	upu.mutation.AddGrantedBy(u)
	return upu
}

// SetGrantedAt sets the "granted_at" field.
func (upu *UserPermissionUpdate) SetGrantedAt(t time.Time) *UserPermissionUpdate {
	upu.mutation.SetGrantedAt(t)
	return upu
}

// SetNillableGrantedAt sets the "granted_at" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableGrantedAt(t *time.Time) *UserPermissionUpdate {
	if t != nil {
		upu.SetGrantedAt(*t)
	}
	return upu
}

// SetExpiresAt sets the "expires_at" field.
func (upu *UserPermissionUpdate) SetExpiresAt(t time.Time) *UserPermissionUpdate {
	upu.mutation.SetExpiresAt(t)
	return upu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableExpiresAt(t *time.Time) *UserPermissionUpdate {
	if t != nil {
		upu.SetExpiresAt(*t)
	}
	return upu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (upu *UserPermissionUpdate) ClearExpiresAt() *UserPermissionUpdate {
	upu.mutation.ClearExpiresAt()
	return upu
}

// SetIsActive sets the "is_active" field.
func (upu *UserPermissionUpdate) SetIsActive(b bool) *UserPermissionUpdate {
	upu.mutation.SetIsActive(b)
	return upu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableIsActive(b *bool) *UserPermissionUpdate {
	if b != nil {
		upu.SetIsActive(*b)
	}
	return upu
}

// SetUser sets the "user" edge to the User entity.
func (upu *UserPermissionUpdate) SetUser(u *User) *UserPermissionUpdate {
	return upu.SetUserID(u.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (upu *UserPermissionUpdate) SetPermission(p *Permission) *UserPermissionUpdate {
	return upu.SetPermissionID(p.ID)
}

// Mutation returns the UserPermissionMutation object of the builder.
func (upu *UserPermissionUpdate) Mutation() *UserPermissionMutation {
	return upu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upu *UserPermissionUpdate) ClearUser() *UserPermissionUpdate {
	upu.mutation.ClearUser()
	return upu
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (upu *UserPermissionUpdate) ClearPermission() *UserPermissionUpdate {
	upu.mutation.ClearPermission()
	return upu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserPermissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserPermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserPermissionUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserPermissionUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upu *UserPermissionUpdate) check() error {
	if upu.mutation.UserCleared() && len(upu.mutation.UserIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "UserPermission.user"`)
	}
	if upu.mutation.PermissionCleared() && len(upu.mutation.PermissionIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "UserPermission.permission"`)
	}
	return nil
}

func (upu *UserPermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := upu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpermission.Table, userpermission.Columns, sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeUint64))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.GrantedBy(); ok {
		_spec.SetField(userpermission.FieldGrantedBy, field.TypeUint64, value)
	}
	if value, ok := upu.mutation.AddedGrantedBy(); ok {
		_spec.AddField(userpermission.FieldGrantedBy, field.TypeUint64, value)
	}
	if value, ok := upu.mutation.GrantedAt(); ok {
		_spec.SetField(userpermission.FieldGrantedAt, field.TypeTime, value)
	}
	if value, ok := upu.mutation.ExpiresAt(); ok {
		_spec.SetField(userpermission.FieldExpiresAt, field.TypeTime, value)
	}
	if upu.mutation.ExpiresAtCleared() {
		_spec.ClearField(userpermission.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := upu.mutation.IsActive(); ok {
		_spec.SetField(userpermission.FieldIsActive, field.TypeBool, value)
	}
	if upu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.UserTable,
			Columns: []string{userpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.UserTable,
			Columns: []string{userpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upu.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.PermissionTable,
			Columns: []string{userpermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.PermissionTable,
			Columns: []string{userpermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserPermissionUpdateOne is the builder for updating a single UserPermission entity.
type UserPermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPermissionMutation
}

// SetUserID sets the "user_id" field.
func (upuo *UserPermissionUpdateOne) SetUserID(u uint64) *UserPermissionUpdateOne {
	upuo.mutation.SetUserID(u)
	return upuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableUserID(u *uint64) *UserPermissionUpdateOne {
	if u != nil {
		upuo.SetUserID(*u)
	}
	return upuo
}

// SetPermissionID sets the "permission_id" field.
func (upuo *UserPermissionUpdateOne) SetPermissionID(u uint64) *UserPermissionUpdateOne {
	upuo.mutation.SetPermissionID(u)
	return upuo
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillablePermissionID(u *uint64) *UserPermissionUpdateOne {
	if u != nil {
		upuo.SetPermissionID(*u)
	}
	return upuo
}

// SetGrantedBy sets the "granted_by" field.
func (upuo *UserPermissionUpdateOne) SetGrantedBy(u uint64) *UserPermissionUpdateOne {
	upuo.mutation.ResetGrantedBy()
	upuo.mutation.SetGrantedBy(u)
	return upuo
}

// SetNillableGrantedBy sets the "granted_by" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableGrantedBy(u *uint64) *UserPermissionUpdateOne {
	if u != nil {
		upuo.SetGrantedBy(*u)
	}
	return upuo
}

// AddGrantedBy adds u to the "granted_by" field.
func (upuo *UserPermissionUpdateOne) AddGrantedBy(u int64) *UserPermissionUpdateOne {
	upuo.mutation.AddGrantedBy(u)
	return upuo
}

// SetGrantedAt sets the "granted_at" field.
func (upuo *UserPermissionUpdateOne) SetGrantedAt(t time.Time) *UserPermissionUpdateOne {
	upuo.mutation.SetGrantedAt(t)
	return upuo
}

// SetNillableGrantedAt sets the "granted_at" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableGrantedAt(t *time.Time) *UserPermissionUpdateOne {
	if t != nil {
		upuo.SetGrantedAt(*t)
	}
	return upuo
}

// SetExpiresAt sets the "expires_at" field.
func (upuo *UserPermissionUpdateOne) SetExpiresAt(t time.Time) *UserPermissionUpdateOne {
	upuo.mutation.SetExpiresAt(t)
	return upuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableExpiresAt(t *time.Time) *UserPermissionUpdateOne {
	if t != nil {
		upuo.SetExpiresAt(*t)
	}
	return upuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (upuo *UserPermissionUpdateOne) ClearExpiresAt() *UserPermissionUpdateOne {
	upuo.mutation.ClearExpiresAt()
	return upuo
}

// SetIsActive sets the "is_active" field.
func (upuo *UserPermissionUpdateOne) SetIsActive(b bool) *UserPermissionUpdateOne {
	upuo.mutation.SetIsActive(b)
	return upuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableIsActive(b *bool) *UserPermissionUpdateOne {
	if b != nil {
		upuo.SetIsActive(*b)
	}
	return upuo
}

// SetUser sets the "user" edge to the User entity.
func (upuo *UserPermissionUpdateOne) SetUser(u *User) *UserPermissionUpdateOne {
	return upuo.SetUserID(u.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (upuo *UserPermissionUpdateOne) SetPermission(p *Permission) *UserPermissionUpdateOne {
	return upuo.SetPermissionID(p.ID)
}

// Mutation returns the UserPermissionMutation object of the builder.
func (upuo *UserPermissionUpdateOne) Mutation() *UserPermissionMutation {
	return upuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upuo *UserPermissionUpdateOne) ClearUser() *UserPermissionUpdateOne {
	upuo.mutation.ClearUser()
	return upuo
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (upuo *UserPermissionUpdateOne) ClearPermission() *UserPermissionUpdateOne {
	upuo.mutation.ClearPermission()
	return upuo
}

// Where appends a list predicates to the UserPermissionUpdate builder.
func (upuo *UserPermissionUpdateOne) Where(ps ...predicate.UserPermission) *UserPermissionUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserPermissionUpdateOne) Select(field string, fields ...string) *UserPermissionUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserPermission entity.
func (upuo *UserPermissionUpdateOne) Save(ctx context.Context) (*UserPermission, error) {
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserPermissionUpdateOne) SaveX(ctx context.Context) *UserPermission {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserPermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserPermissionUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upuo *UserPermissionUpdateOne) check() error {
	if upuo.mutation.UserCleared() && len(upuo.mutation.UserIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "UserPermission.user"`)
	}
	if upuo.mutation.PermissionCleared() && len(upuo.mutation.PermissionIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "UserPermission.permission"`)
	}
	return nil
}

func (upuo *UserPermissionUpdateOne) sqlSave(ctx context.Context) (_node *UserPermission, err error) {
	if err := upuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpermission.Table, userpermission.Columns, sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeUint64))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "UserPermission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpermission.FieldID)
		for _, f := range fields {
			if !userpermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != userpermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.GrantedBy(); ok {
		_spec.SetField(userpermission.FieldGrantedBy, field.TypeUint64, value)
	}
	if value, ok := upuo.mutation.AddedGrantedBy(); ok {
		_spec.AddField(userpermission.FieldGrantedBy, field.TypeUint64, value)
	}
	if value, ok := upuo.mutation.GrantedAt(); ok {
		_spec.SetField(userpermission.FieldGrantedAt, field.TypeTime, value)
	}
	if value, ok := upuo.mutation.ExpiresAt(); ok {
		_spec.SetField(userpermission.FieldExpiresAt, field.TypeTime, value)
	}
	if upuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(userpermission.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := upuo.mutation.IsActive(); ok {
		_spec.SetField(userpermission.FieldIsActive, field.TypeBool, value)
	}
	if upuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.UserTable,
			Columns: []string{userpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.UserTable,
			Columns: []string{userpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upuo.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.PermissionTable,
			Columns: []string{userpermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.PermissionTable,
			Columns: []string{userpermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPermission{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
