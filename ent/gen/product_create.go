// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/cartitem"
	"github.com/thang1834/go-goss/ent/gen/category"
	"github.com/thang1834/go-goss/ent/gen/discountproduct"
	"github.com/thang1834/go-goss/ent/gen/orderitem"
	"github.com/thang1834/go-goss/ent/gen/product"
	"github.com/thang1834/go-goss/ent/gen/productimage"
	"github.com/thang1834/go-goss/ent/gen/review"
	"github.com/thang1834/go-goss/ent/gen/wishlistitem"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *ProductCreate) SetName(s string) *ProductCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetSlug sets the "slug" field.
func (pc *ProductCreate) SetSlug(s string) *ProductCreate {
	pc.mutation.SetSlug(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProductCreate) SetDescription(s string) *ProductCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDescription(s *string) *ProductCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetPrice sets the "price" field.
func (pc *ProductCreate) SetPrice(f float64) *ProductCreate {
	pc.mutation.SetPrice(f)
	return pc
}

// SetStockQuantity sets the "stock_quantity" field.
func (pc *ProductCreate) SetStockQuantity(i int) *ProductCreate {
	pc.mutation.SetStockQuantity(i)
	return pc
}

// SetNillableStockQuantity sets the "stock_quantity" field if the given value is not nil.
func (pc *ProductCreate) SetNillableStockQuantity(i *int) *ProductCreate {
	if i != nil {
		pc.SetStockQuantity(*i)
	}
	return pc
}

// SetAvgRating sets the "avg_rating" field.
func (pc *ProductCreate) SetAvgRating(f float64) *ProductCreate {
	pc.mutation.SetAvgRating(f)
	return pc
}

// SetNillableAvgRating sets the "avg_rating" field if the given value is not nil.
func (pc *ProductCreate) SetNillableAvgRating(f *float64) *ProductCreate {
	if f != nil {
		pc.SetAvgRating(*f)
	}
	return pc
}

// SetReviewCount sets the "review_count" field.
func (pc *ProductCreate) SetReviewCount(i int) *ProductCreate {
	pc.mutation.SetReviewCount(i)
	return pc
}

// SetNillableReviewCount sets the "review_count" field if the given value is not nil.
func (pc *ProductCreate) SetNillableReviewCount(i *int) *ProductCreate {
	if i != nil {
		pc.SetReviewCount(*i)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProductCreate) SetCreatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProductCreate) SetUpdatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUpdatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProductCreate) SetID(u uint64) *ProductCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (pc *ProductCreate) SetCategoryID(id uint64) *ProductCreate {
	pc.mutation.SetCategoryID(id)
	return pc
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (pc *ProductCreate) SetNillableCategoryID(id *uint64) *ProductCreate {
	if id != nil {
		pc = pc.SetCategoryID(*id)
	}
	return pc
}

// SetCategory sets the "category" edge to the Category entity.
func (pc *ProductCreate) SetCategory(c *Category) *ProductCreate {
	return pc.SetCategoryID(c.ID)
}

// AddImageIDs adds the "images" edge to the ProductImage entity by IDs.
func (pc *ProductCreate) AddImageIDs(ids ...uint64) *ProductCreate {
	pc.mutation.AddImageIDs(ids...)
	return pc
}

// AddImages adds the "images" edges to the ProductImage entity.
func (pc *ProductCreate) AddImages(p ...*ProductImage) *ProductCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddImageIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (pc *ProductCreate) AddReviewIDs(ids ...uint64) *ProductCreate {
	pc.mutation.AddReviewIDs(ids...)
	return pc
}

// AddReviews adds the "reviews" edges to the Review entity.
func (pc *ProductCreate) AddReviews(r ...*Review) *ProductCreate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddReviewIDs(ids...)
}

// AddCartItemIDs adds the "cart_items" edge to the CartItem entity by IDs.
func (pc *ProductCreate) AddCartItemIDs(ids ...int) *ProductCreate {
	pc.mutation.AddCartItemIDs(ids...)
	return pc
}

// AddCartItems adds the "cart_items" edges to the CartItem entity.
func (pc *ProductCreate) AddCartItems(c ...*CartItem) *ProductCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddCartItemIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (pc *ProductCreate) AddOrderItemIDs(ids ...uint64) *ProductCreate {
	pc.mutation.AddOrderItemIDs(ids...)
	return pc
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (pc *ProductCreate) AddOrderItems(o ...*OrderItem) *ProductCreate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pc.AddOrderItemIDs(ids...)
}

// AddDiscountIDs adds the "discounts" edge to the DiscountProduct entity by IDs.
func (pc *ProductCreate) AddDiscountIDs(ids ...int) *ProductCreate {
	pc.mutation.AddDiscountIDs(ids...)
	return pc
}

// AddDiscounts adds the "discounts" edges to the DiscountProduct entity.
func (pc *ProductCreate) AddDiscounts(d ...*DiscountProduct) *ProductCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddDiscountIDs(ids...)
}

// AddWishlistItemIDs adds the "wishlist_items" edge to the WishlistItem entity by IDs.
func (pc *ProductCreate) AddWishlistItemIDs(ids ...int) *ProductCreate {
	pc.mutation.AddWishlistItemIDs(ids...)
	return pc
}

// AddWishlistItems adds the "wishlist_items" edges to the WishlistItem entity.
func (pc *ProductCreate) AddWishlistItems(w ...*WishlistItem) *ProductCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return pc.AddWishlistItemIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProductCreate) defaults() {
	if _, ok := pc.mutation.StockQuantity(); !ok {
		v := product.DefaultStockQuantity
		pc.mutation.SetStockQuantity(v)
	}
	if _, ok := pc.mutation.AvgRating(); !ok {
		v := product.DefaultAvgRating
		pc.mutation.SetAvgRating(v)
	}
	if _, ok := pc.mutation.ReviewCount(); !ok {
		v := product.DefaultReviewCount
		pc.mutation.SetReviewCount(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := product.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := product.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "Product.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Product.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`gen: missing required field "Product.slug"`)}
	}
	if v, ok := pc.mutation.Slug(); ok {
		if err := product.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`gen: validator failed for field "Product.slug": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`gen: missing required field "Product.price"`)}
	}
	if _, ok := pc.mutation.StockQuantity(); !ok {
		return &ValidationError{Name: "stock_quantity", err: errors.New(`gen: missing required field "Product.stock_quantity"`)}
	}
	if _, ok := pc.mutation.AvgRating(); !ok {
		return &ValidationError{Name: "avg_rating", err: errors.New(`gen: missing required field "Product.avg_rating"`)}
	}
	if _, ok := pc.mutation.ReviewCount(); !ok {
		return &ValidationError{Name: "review_count", err: errors.New(`gen: missing required field "Product.review_count"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Product.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Product.updated_at"`)}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(product.Table, sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Slug(); ok {
		_spec.SetField(product.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := pc.mutation.StockQuantity(); ok {
		_spec.SetField(product.FieldStockQuantity, field.TypeInt, value)
		_node.StockQuantity = value
	}
	if value, ok := pc.mutation.AvgRating(); ok {
		_spec.SetField(product.FieldAvgRating, field.TypeFloat64, value)
		_node.AvgRating = value
	}
	if value, ok := pc.mutation.ReviewCount(); ok {
		_spec.SetField(product.FieldReviewCount, field.TypeInt, value)
		_node.ReviewCount = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.category_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ImagesTable,
			Columns: []string{product.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReviewsTable,
			Columns: []string{product.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CartItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.DiscountsTable,
			Columns: []string{product.DiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.WishlistItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.WishlistItemsTable,
			Columns: []string{product.WishlistItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	err      error
	builders []*ProductCreate
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
