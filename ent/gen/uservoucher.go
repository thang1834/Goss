// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/thang1834/go-goss/ent/gen/discount"
	"github.com/thang1834/go-goss/ent/gen/user"
	"github.com/thang1834/go-goss/ent/gen/uservoucher"
)

// UserVoucher is the model entity for the UserVoucher schema.
type UserVoucher struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// IsUsed holds the value of the "is_used" field.
	IsUsed bool `json:"is_used,omitempty"`
	// UsedAt holds the value of the "used_at" field.
	UsedAt time.Time `json:"used_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserVoucherQuery when eager-loading is set.
	Edges                  UserVoucherEdges `json:"edges"`
	discount_user_vouchers *uint64
	user_vouchers          *uint64
	selectValues           sql.SelectValues
}

// UserVoucherEdges holds the relations/edges for other nodes in the graph.
type UserVoucherEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Discount holds the value of the discount edge.
	Discount *Discount `json:"discount,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserVoucherEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// DiscountOrErr returns the Discount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserVoucherEdges) DiscountOrErr() (*Discount, error) {
	if e.Discount != nil {
		return e.Discount, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: discount.Label}
	}
	return nil, &NotLoadedError{edge: "discount"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserVoucher) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case uservoucher.FieldIsUsed:
			values[i] = new(sql.NullBool)
		case uservoucher.FieldID:
			values[i] = new(sql.NullInt64)
		case uservoucher.FieldUsedAt:
			values[i] = new(sql.NullTime)
		case uservoucher.ForeignKeys[0]: // discount_user_vouchers
			values[i] = new(sql.NullInt64)
		case uservoucher.ForeignKeys[1]: // user_vouchers
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserVoucher fields.
func (uv *UserVoucher) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uservoucher.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uv.ID = uint64(value.Int64)
		case uservoucher.FieldIsUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_used", values[i])
			} else if value.Valid {
				uv.IsUsed = value.Bool
			}
		case uservoucher.FieldUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field used_at", values[i])
			} else if value.Valid {
				uv.UsedAt = value.Time
			}
		case uservoucher.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field discount_user_vouchers", value)
			} else if value.Valid {
				uv.discount_user_vouchers = new(uint64)
				*uv.discount_user_vouchers = uint64(value.Int64)
			}
		case uservoucher.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_vouchers", value)
			} else if value.Valid {
				uv.user_vouchers = new(uint64)
				*uv.user_vouchers = uint64(value.Int64)
			}
		default:
			uv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserVoucher.
// This includes values selected through modifiers, order, etc.
func (uv *UserVoucher) Value(name string) (ent.Value, error) {
	return uv.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserVoucher entity.
func (uv *UserVoucher) QueryUser() *UserQuery {
	return NewUserVoucherClient(uv.config).QueryUser(uv)
}

// QueryDiscount queries the "discount" edge of the UserVoucher entity.
func (uv *UserVoucher) QueryDiscount() *DiscountQuery {
	return NewUserVoucherClient(uv.config).QueryDiscount(uv)
}

// Update returns a builder for updating this UserVoucher.
// Note that you need to call UserVoucher.Unwrap() before calling this method if this UserVoucher
// was returned from a transaction, and the transaction was committed or rolled back.
func (uv *UserVoucher) Update() *UserVoucherUpdateOne {
	return NewUserVoucherClient(uv.config).UpdateOne(uv)
}

// Unwrap unwraps the UserVoucher entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uv *UserVoucher) Unwrap() *UserVoucher {
	_tx, ok := uv.config.driver.(*txDriver)
	if !ok {
		panic("gen: UserVoucher is not a transactional entity")
	}
	uv.config.driver = _tx.drv
	return uv
}

// String implements the fmt.Stringer.
func (uv *UserVoucher) String() string {
	var builder strings.Builder
	builder.WriteString("UserVoucher(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uv.ID))
	builder.WriteString("is_used=")
	builder.WriteString(fmt.Sprintf("%v", uv.IsUsed))
	builder.WriteString(", ")
	builder.WriteString("used_at=")
	builder.WriteString(uv.UsedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserVouchers is a parsable slice of UserVoucher.
type UserVouchers []*UserVoucher
