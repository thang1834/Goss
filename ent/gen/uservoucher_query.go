// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/discount"
	"github.com/thang1834/go-goss/ent/gen/predicate"
	"github.com/thang1834/go-goss/ent/gen/user"
	"github.com/thang1834/go-goss/ent/gen/uservoucher"
)

// UserVoucherQuery is the builder for querying UserVoucher entities.
type UserVoucherQuery struct {
	config
	ctx          *QueryContext
	order        []uservoucher.OrderOption
	inters       []Interceptor
	predicates   []predicate.UserVoucher
	withUser     *UserQuery
	withDiscount *DiscountQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserVoucherQuery builder.
func (uvq *UserVoucherQuery) Where(ps ...predicate.UserVoucher) *UserVoucherQuery {
	uvq.predicates = append(uvq.predicates, ps...)
	return uvq
}

// Limit the number of records to be returned by this query.
func (uvq *UserVoucherQuery) Limit(limit int) *UserVoucherQuery {
	uvq.ctx.Limit = &limit
	return uvq
}

// Offset to start from.
func (uvq *UserVoucherQuery) Offset(offset int) *UserVoucherQuery {
	uvq.ctx.Offset = &offset
	return uvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uvq *UserVoucherQuery) Unique(unique bool) *UserVoucherQuery {
	uvq.ctx.Unique = &unique
	return uvq
}

// Order specifies how the records should be ordered.
func (uvq *UserVoucherQuery) Order(o ...uservoucher.OrderOption) *UserVoucherQuery {
	uvq.order = append(uvq.order, o...)
	return uvq
}

// QueryUser chains the current query on the "user" edge.
func (uvq *UserVoucherQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: uvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(uservoucher.Table, uservoucher.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, uservoucher.UserTable, uservoucher.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(uvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDiscount chains the current query on the "discount" edge.
func (uvq *UserVoucherQuery) QueryDiscount() *DiscountQuery {
	query := (&DiscountClient{config: uvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(uservoucher.Table, uservoucher.FieldID, selector),
			sqlgraph.To(discount.Table, discount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, uservoucher.DiscountTable, uservoucher.DiscountColumn),
		)
		fromU = sqlgraph.SetNeighbors(uvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserVoucher entity from the query.
// Returns a *NotFoundError when no UserVoucher was found.
func (uvq *UserVoucherQuery) First(ctx context.Context) (*UserVoucher, error) {
	nodes, err := uvq.Limit(1).All(setContextOp(ctx, uvq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{uservoucher.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uvq *UserVoucherQuery) FirstX(ctx context.Context) *UserVoucher {
	node, err := uvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserVoucher ID from the query.
// Returns a *NotFoundError when no UserVoucher ID was found.
func (uvq *UserVoucherQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = uvq.Limit(1).IDs(setContextOp(ctx, uvq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{uservoucher.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uvq *UserVoucherQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := uvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserVoucher entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserVoucher entity is found.
// Returns a *NotFoundError when no UserVoucher entities are found.
func (uvq *UserVoucherQuery) Only(ctx context.Context) (*UserVoucher, error) {
	nodes, err := uvq.Limit(2).All(setContextOp(ctx, uvq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{uservoucher.Label}
	default:
		return nil, &NotSingularError{uservoucher.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uvq *UserVoucherQuery) OnlyX(ctx context.Context) *UserVoucher {
	node, err := uvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserVoucher ID in the query.
// Returns a *NotSingularError when more than one UserVoucher ID is found.
// Returns a *NotFoundError when no entities are found.
func (uvq *UserVoucherQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = uvq.Limit(2).IDs(setContextOp(ctx, uvq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{uservoucher.Label}
	default:
		err = &NotSingularError{uservoucher.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uvq *UserVoucherQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := uvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserVouchers.
func (uvq *UserVoucherQuery) All(ctx context.Context) ([]*UserVoucher, error) {
	ctx = setContextOp(ctx, uvq.ctx, ent.OpQueryAll)
	if err := uvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserVoucher, *UserVoucherQuery]()
	return withInterceptors[[]*UserVoucher](ctx, uvq, qr, uvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uvq *UserVoucherQuery) AllX(ctx context.Context) []*UserVoucher {
	nodes, err := uvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserVoucher IDs.
func (uvq *UserVoucherQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if uvq.ctx.Unique == nil && uvq.path != nil {
		uvq.Unique(true)
	}
	ctx = setContextOp(ctx, uvq.ctx, ent.OpQueryIDs)
	if err = uvq.Select(uservoucher.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uvq *UserVoucherQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := uvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uvq *UserVoucherQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uvq.ctx, ent.OpQueryCount)
	if err := uvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uvq, querierCount[*UserVoucherQuery](), uvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uvq *UserVoucherQuery) CountX(ctx context.Context) int {
	count, err := uvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uvq *UserVoucherQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uvq.ctx, ent.OpQueryExist)
	switch _, err := uvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("gen: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uvq *UserVoucherQuery) ExistX(ctx context.Context) bool {
	exist, err := uvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserVoucherQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uvq *UserVoucherQuery) Clone() *UserVoucherQuery {
	if uvq == nil {
		return nil
	}
	return &UserVoucherQuery{
		config:       uvq.config,
		ctx:          uvq.ctx.Clone(),
		order:        append([]uservoucher.OrderOption{}, uvq.order...),
		inters:       append([]Interceptor{}, uvq.inters...),
		predicates:   append([]predicate.UserVoucher{}, uvq.predicates...),
		withUser:     uvq.withUser.Clone(),
		withDiscount: uvq.withDiscount.Clone(),
		// clone intermediate query.
		sql:  uvq.sql.Clone(),
		path: uvq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (uvq *UserVoucherQuery) WithUser(opts ...func(*UserQuery)) *UserVoucherQuery {
	query := (&UserClient{config: uvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uvq.withUser = query
	return uvq
}

// WithDiscount tells the query-builder to eager-load the nodes that are connected to
// the "discount" edge. The optional arguments are used to configure the query builder of the edge.
func (uvq *UserVoucherQuery) WithDiscount(opts ...func(*DiscountQuery)) *UserVoucherQuery {
	query := (&DiscountClient{config: uvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uvq.withDiscount = query
	return uvq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		IsUsed bool `json:"is_used,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserVoucher.Query().
//		GroupBy(uservoucher.FieldIsUsed).
//		Aggregate(gen.Count()).
//		Scan(ctx, &v)
func (uvq *UserVoucherQuery) GroupBy(field string, fields ...string) *UserVoucherGroupBy {
	uvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserVoucherGroupBy{build: uvq}
	grbuild.flds = &uvq.ctx.Fields
	grbuild.label = uservoucher.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		IsUsed bool `json:"is_used,omitempty"`
//	}
//
//	client.UserVoucher.Query().
//		Select(uservoucher.FieldIsUsed).
//		Scan(ctx, &v)
func (uvq *UserVoucherQuery) Select(fields ...string) *UserVoucherSelect {
	uvq.ctx.Fields = append(uvq.ctx.Fields, fields...)
	sbuild := &UserVoucherSelect{UserVoucherQuery: uvq}
	sbuild.label = uservoucher.Label
	sbuild.flds, sbuild.scan = &uvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserVoucherSelect configured with the given aggregations.
func (uvq *UserVoucherQuery) Aggregate(fns ...AggregateFunc) *UserVoucherSelect {
	return uvq.Select().Aggregate(fns...)
}

func (uvq *UserVoucherQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uvq.inters {
		if inter == nil {
			return fmt.Errorf("gen: uninitialized interceptor (forgotten import gen/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uvq); err != nil {
				return err
			}
		}
	}
	for _, f := range uvq.ctx.Fields {
		if !uservoucher.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
		}
	}
	if uvq.path != nil {
		prev, err := uvq.path(ctx)
		if err != nil {
			return err
		}
		uvq.sql = prev
	}
	return nil
}

func (uvq *UserVoucherQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserVoucher, error) {
	var (
		nodes       = []*UserVoucher{}
		withFKs     = uvq.withFKs
		_spec       = uvq.querySpec()
		loadedTypes = [2]bool{
			uvq.withUser != nil,
			uvq.withDiscount != nil,
		}
	)
	if uvq.withUser != nil || uvq.withDiscount != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, uservoucher.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserVoucher).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserVoucher{config: uvq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uvq.withUser; query != nil {
		if err := uvq.loadUser(ctx, query, nodes, nil,
			func(n *UserVoucher, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := uvq.withDiscount; query != nil {
		if err := uvq.loadDiscount(ctx, query, nodes, nil,
			func(n *UserVoucher, e *Discount) { n.Edges.Discount = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uvq *UserVoucherQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserVoucher, init func(*UserVoucher), assign func(*UserVoucher, *User)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*UserVoucher)
	for i := range nodes {
		if nodes[i].user_vouchers == nil {
			continue
		}
		fk := *nodes[i].user_vouchers
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_vouchers" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uvq *UserVoucherQuery) loadDiscount(ctx context.Context, query *DiscountQuery, nodes []*UserVoucher, init func(*UserVoucher), assign func(*UserVoucher, *Discount)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*UserVoucher)
	for i := range nodes {
		if nodes[i].discount_user_vouchers == nil {
			continue
		}
		fk := *nodes[i].discount_user_vouchers
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(discount.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "discount_user_vouchers" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (uvq *UserVoucherQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uvq.querySpec()
	_spec.Node.Columns = uvq.ctx.Fields
	if len(uvq.ctx.Fields) > 0 {
		_spec.Unique = uvq.ctx.Unique != nil && *uvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uvq.driver, _spec)
}

func (uvq *UserVoucherQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(uservoucher.Table, uservoucher.Columns, sqlgraph.NewFieldSpec(uservoucher.FieldID, field.TypeUint64))
	_spec.From = uvq.sql
	if unique := uvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uvq.path != nil {
		_spec.Unique = true
	}
	if fields := uvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, uservoucher.FieldID)
		for i := range fields {
			if fields[i] != uservoucher.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uvq *UserVoucherQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uvq.driver.Dialect())
	t1 := builder.Table(uservoucher.Table)
	columns := uvq.ctx.Fields
	if len(columns) == 0 {
		columns = uservoucher.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uvq.sql != nil {
		selector = uvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uvq.ctx.Unique != nil && *uvq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uvq.predicates {
		p(selector)
	}
	for _, p := range uvq.order {
		p(selector)
	}
	if offset := uvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserVoucherGroupBy is the group-by builder for UserVoucher entities.
type UserVoucherGroupBy struct {
	selector
	build *UserVoucherQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uvgb *UserVoucherGroupBy) Aggregate(fns ...AggregateFunc) *UserVoucherGroupBy {
	uvgb.fns = append(uvgb.fns, fns...)
	return uvgb
}

// Scan applies the selector query and scans the result into the given value.
func (uvgb *UserVoucherGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uvgb.build.ctx, ent.OpQueryGroupBy)
	if err := uvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserVoucherQuery, *UserVoucherGroupBy](ctx, uvgb.build, uvgb, uvgb.build.inters, v)
}

func (uvgb *UserVoucherGroupBy) sqlScan(ctx context.Context, root *UserVoucherQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(uvgb.fns))
	for _, fn := range uvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*uvgb.flds)+len(uvgb.fns))
		for _, f := range *uvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*uvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserVoucherSelect is the builder for selecting fields of UserVoucher entities.
type UserVoucherSelect struct {
	*UserVoucherQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uvs *UserVoucherSelect) Aggregate(fns ...AggregateFunc) *UserVoucherSelect {
	uvs.fns = append(uvs.fns, fns...)
	return uvs
}

// Scan applies the selector query and scans the result into the given value.
func (uvs *UserVoucherSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uvs.ctx, ent.OpQuerySelect)
	if err := uvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserVoucherQuery, *UserVoucherSelect](ctx, uvs.UserVoucherQuery, uvs, uvs.inters, v)
}

func (uvs *UserVoucherSelect) sqlScan(ctx context.Context, root *UserVoucherQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(uvs.fns))
	for _, fn := range uvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*uvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
