// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/predicate"
	"github.com/thang1834/go-goss/ent/gen/product"
	"github.com/thang1834/go-goss/ent/gen/wishlist"
	"github.com/thang1834/go-goss/ent/gen/wishlistitem"
)

// WishlistItemUpdate is the builder for updating WishlistItem entities.
type WishlistItemUpdate struct {
	config
	hooks    []Hook
	mutation *WishlistItemMutation
}

// Where appends a list predicates to the WishlistItemUpdate builder.
func (wiu *WishlistItemUpdate) Where(ps ...predicate.WishlistItem) *WishlistItemUpdate {
	wiu.mutation.Where(ps...)
	return wiu
}

// SetAddedAt sets the "added_at" field.
func (wiu *WishlistItemUpdate) SetAddedAt(t time.Time) *WishlistItemUpdate {
	wiu.mutation.SetAddedAt(t)
	return wiu
}

// SetNillableAddedAt sets the "added_at" field if the given value is not nil.
func (wiu *WishlistItemUpdate) SetNillableAddedAt(t *time.Time) *WishlistItemUpdate {
	if t != nil {
		wiu.SetAddedAt(*t)
	}
	return wiu
}

// SetWishlistID sets the "wishlist" edge to the Wishlist entity by ID.
func (wiu *WishlistItemUpdate) SetWishlistID(id uint64) *WishlistItemUpdate {
	wiu.mutation.SetWishlistID(id)
	return wiu
}

// SetNillableWishlistID sets the "wishlist" edge to the Wishlist entity by ID if the given value is not nil.
func (wiu *WishlistItemUpdate) SetNillableWishlistID(id *uint64) *WishlistItemUpdate {
	if id != nil {
		wiu = wiu.SetWishlistID(*id)
	}
	return wiu
}

// SetWishlist sets the "wishlist" edge to the Wishlist entity.
func (wiu *WishlistItemUpdate) SetWishlist(w *Wishlist) *WishlistItemUpdate {
	return wiu.SetWishlistID(w.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (wiu *WishlistItemUpdate) SetProductID(id uint64) *WishlistItemUpdate {
	wiu.mutation.SetProductID(id)
	return wiu
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (wiu *WishlistItemUpdate) SetNillableProductID(id *uint64) *WishlistItemUpdate {
	if id != nil {
		wiu = wiu.SetProductID(*id)
	}
	return wiu
}

// SetProduct sets the "product" edge to the Product entity.
func (wiu *WishlistItemUpdate) SetProduct(p *Product) *WishlistItemUpdate {
	return wiu.SetProductID(p.ID)
}

// Mutation returns the WishlistItemMutation object of the builder.
func (wiu *WishlistItemUpdate) Mutation() *WishlistItemMutation {
	return wiu.mutation
}

// ClearWishlist clears the "wishlist" edge to the Wishlist entity.
func (wiu *WishlistItemUpdate) ClearWishlist() *WishlistItemUpdate {
	wiu.mutation.ClearWishlist()
	return wiu
}

// ClearProduct clears the "product" edge to the Product entity.
func (wiu *WishlistItemUpdate) ClearProduct() *WishlistItemUpdate {
	wiu.mutation.ClearProduct()
	return wiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wiu *WishlistItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wiu.sqlSave, wiu.mutation, wiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wiu *WishlistItemUpdate) SaveX(ctx context.Context) int {
	affected, err := wiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wiu *WishlistItemUpdate) Exec(ctx context.Context) error {
	_, err := wiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wiu *WishlistItemUpdate) ExecX(ctx context.Context) {
	if err := wiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wiu *WishlistItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(wishlistitem.Table, wishlistitem.Columns, sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt))
	if ps := wiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wiu.mutation.AddedAt(); ok {
		_spec.SetField(wishlistitem.FieldAddedAt, field.TypeTime, value)
	}
	if wiu.mutation.WishlistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlistitem.WishlistTable,
			Columns: []string{wishlistitem.WishlistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlist.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiu.mutation.WishlistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlistitem.WishlistTable,
			Columns: []string{wishlistitem.WishlistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlist.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wiu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlistitem.ProductTable,
			Columns: []string{wishlistitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlistitem.ProductTable,
			Columns: []string{wishlistitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wishlistitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wiu.mutation.done = true
	return n, nil
}

// WishlistItemUpdateOne is the builder for updating a single WishlistItem entity.
type WishlistItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WishlistItemMutation
}

// SetAddedAt sets the "added_at" field.
func (wiuo *WishlistItemUpdateOne) SetAddedAt(t time.Time) *WishlistItemUpdateOne {
	wiuo.mutation.SetAddedAt(t)
	return wiuo
}

// SetNillableAddedAt sets the "added_at" field if the given value is not nil.
func (wiuo *WishlistItemUpdateOne) SetNillableAddedAt(t *time.Time) *WishlistItemUpdateOne {
	if t != nil {
		wiuo.SetAddedAt(*t)
	}
	return wiuo
}

// SetWishlistID sets the "wishlist" edge to the Wishlist entity by ID.
func (wiuo *WishlistItemUpdateOne) SetWishlistID(id uint64) *WishlistItemUpdateOne {
	wiuo.mutation.SetWishlistID(id)
	return wiuo
}

// SetNillableWishlistID sets the "wishlist" edge to the Wishlist entity by ID if the given value is not nil.
func (wiuo *WishlistItemUpdateOne) SetNillableWishlistID(id *uint64) *WishlistItemUpdateOne {
	if id != nil {
		wiuo = wiuo.SetWishlistID(*id)
	}
	return wiuo
}

// SetWishlist sets the "wishlist" edge to the Wishlist entity.
func (wiuo *WishlistItemUpdateOne) SetWishlist(w *Wishlist) *WishlistItemUpdateOne {
	return wiuo.SetWishlistID(w.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (wiuo *WishlistItemUpdateOne) SetProductID(id uint64) *WishlistItemUpdateOne {
	wiuo.mutation.SetProductID(id)
	return wiuo
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (wiuo *WishlistItemUpdateOne) SetNillableProductID(id *uint64) *WishlistItemUpdateOne {
	if id != nil {
		wiuo = wiuo.SetProductID(*id)
	}
	return wiuo
}

// SetProduct sets the "product" edge to the Product entity.
func (wiuo *WishlistItemUpdateOne) SetProduct(p *Product) *WishlistItemUpdateOne {
	return wiuo.SetProductID(p.ID)
}

// Mutation returns the WishlistItemMutation object of the builder.
func (wiuo *WishlistItemUpdateOne) Mutation() *WishlistItemMutation {
	return wiuo.mutation
}

// ClearWishlist clears the "wishlist" edge to the Wishlist entity.
func (wiuo *WishlistItemUpdateOne) ClearWishlist() *WishlistItemUpdateOne {
	wiuo.mutation.ClearWishlist()
	return wiuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (wiuo *WishlistItemUpdateOne) ClearProduct() *WishlistItemUpdateOne {
	wiuo.mutation.ClearProduct()
	return wiuo
}

// Where appends a list predicates to the WishlistItemUpdate builder.
func (wiuo *WishlistItemUpdateOne) Where(ps ...predicate.WishlistItem) *WishlistItemUpdateOne {
	wiuo.mutation.Where(ps...)
	return wiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wiuo *WishlistItemUpdateOne) Select(field string, fields ...string) *WishlistItemUpdateOne {
	wiuo.fields = append([]string{field}, fields...)
	return wiuo
}

// Save executes the query and returns the updated WishlistItem entity.
func (wiuo *WishlistItemUpdateOne) Save(ctx context.Context) (*WishlistItem, error) {
	return withHooks(ctx, wiuo.sqlSave, wiuo.mutation, wiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wiuo *WishlistItemUpdateOne) SaveX(ctx context.Context) *WishlistItem {
	node, err := wiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wiuo *WishlistItemUpdateOne) Exec(ctx context.Context) error {
	_, err := wiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wiuo *WishlistItemUpdateOne) ExecX(ctx context.Context) {
	if err := wiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wiuo *WishlistItemUpdateOne) sqlSave(ctx context.Context) (_node *WishlistItem, err error) {
	_spec := sqlgraph.NewUpdateSpec(wishlistitem.Table, wishlistitem.Columns, sqlgraph.NewFieldSpec(wishlistitem.FieldID, field.TypeInt))
	id, ok := wiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "WishlistItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wishlistitem.FieldID)
		for _, f := range fields {
			if !wishlistitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != wishlistitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wiuo.mutation.AddedAt(); ok {
		_spec.SetField(wishlistitem.FieldAddedAt, field.TypeTime, value)
	}
	if wiuo.mutation.WishlistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlistitem.WishlistTable,
			Columns: []string{wishlistitem.WishlistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlist.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiuo.mutation.WishlistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlistitem.WishlistTable,
			Columns: []string{wishlistitem.WishlistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlist.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wiuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlistitem.ProductTable,
			Columns: []string{wishlistitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlistitem.ProductTable,
			Columns: []string{wishlistitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WishlistItem{config: wiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wishlistitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wiuo.mutation.done = true
	return _node, nil
}
