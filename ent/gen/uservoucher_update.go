// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/discount"
	"github.com/thang1834/go-goss/ent/gen/predicate"
	"github.com/thang1834/go-goss/ent/gen/user"
	"github.com/thang1834/go-goss/ent/gen/uservoucher"
)

// UserVoucherUpdate is the builder for updating UserVoucher entities.
type UserVoucherUpdate struct {
	config
	hooks    []Hook
	mutation *UserVoucherMutation
}

// Where appends a list predicates to the UserVoucherUpdate builder.
func (uvu *UserVoucherUpdate) Where(ps ...predicate.UserVoucher) *UserVoucherUpdate {
	uvu.mutation.Where(ps...)
	return uvu
}

// SetIsUsed sets the "is_used" field.
func (uvu *UserVoucherUpdate) SetIsUsed(b bool) *UserVoucherUpdate {
	uvu.mutation.SetIsUsed(b)
	return uvu
}

// SetNillableIsUsed sets the "is_used" field if the given value is not nil.
func (uvu *UserVoucherUpdate) SetNillableIsUsed(b *bool) *UserVoucherUpdate {
	if b != nil {
		uvu.SetIsUsed(*b)
	}
	return uvu
}

// SetUsedAt sets the "used_at" field.
func (uvu *UserVoucherUpdate) SetUsedAt(t time.Time) *UserVoucherUpdate {
	uvu.mutation.SetUsedAt(t)
	return uvu
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (uvu *UserVoucherUpdate) SetNillableUsedAt(t *time.Time) *UserVoucherUpdate {
	if t != nil {
		uvu.SetUsedAt(*t)
	}
	return uvu
}

// ClearUsedAt clears the value of the "used_at" field.
func (uvu *UserVoucherUpdate) ClearUsedAt() *UserVoucherUpdate {
	uvu.mutation.ClearUsedAt()
	return uvu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uvu *UserVoucherUpdate) SetUserID(id uint64) *UserVoucherUpdate {
	uvu.mutation.SetUserID(id)
	return uvu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (uvu *UserVoucherUpdate) SetNillableUserID(id *uint64) *UserVoucherUpdate {
	if id != nil {
		uvu = uvu.SetUserID(*id)
	}
	return uvu
}

// SetUser sets the "user" edge to the User entity.
func (uvu *UserVoucherUpdate) SetUser(u *User) *UserVoucherUpdate {
	return uvu.SetUserID(u.ID)
}

// SetDiscountID sets the "discount" edge to the Discount entity by ID.
func (uvu *UserVoucherUpdate) SetDiscountID(id uint64) *UserVoucherUpdate {
	uvu.mutation.SetDiscountID(id)
	return uvu
}

// SetNillableDiscountID sets the "discount" edge to the Discount entity by ID if the given value is not nil.
func (uvu *UserVoucherUpdate) SetNillableDiscountID(id *uint64) *UserVoucherUpdate {
	if id != nil {
		uvu = uvu.SetDiscountID(*id)
	}
	return uvu
}

// SetDiscount sets the "discount" edge to the Discount entity.
func (uvu *UserVoucherUpdate) SetDiscount(d *Discount) *UserVoucherUpdate {
	return uvu.SetDiscountID(d.ID)
}

// Mutation returns the UserVoucherMutation object of the builder.
func (uvu *UserVoucherUpdate) Mutation() *UserVoucherMutation {
	return uvu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uvu *UserVoucherUpdate) ClearUser() *UserVoucherUpdate {
	uvu.mutation.ClearUser()
	return uvu
}

// ClearDiscount clears the "discount" edge to the Discount entity.
func (uvu *UserVoucherUpdate) ClearDiscount() *UserVoucherUpdate {
	uvu.mutation.ClearDiscount()
	return uvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uvu *UserVoucherUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uvu.sqlSave, uvu.mutation, uvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uvu *UserVoucherUpdate) SaveX(ctx context.Context) int {
	affected, err := uvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uvu *UserVoucherUpdate) Exec(ctx context.Context) error {
	_, err := uvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvu *UserVoucherUpdate) ExecX(ctx context.Context) {
	if err := uvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uvu *UserVoucherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(uservoucher.Table, uservoucher.Columns, sqlgraph.NewFieldSpec(uservoucher.FieldID, field.TypeUint64))
	if ps := uvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uvu.mutation.IsUsed(); ok {
		_spec.SetField(uservoucher.FieldIsUsed, field.TypeBool, value)
	}
	if value, ok := uvu.mutation.UsedAt(); ok {
		_spec.SetField(uservoucher.FieldUsedAt, field.TypeTime, value)
	}
	if uvu.mutation.UsedAtCleared() {
		_spec.ClearField(uservoucher.FieldUsedAt, field.TypeTime)
	}
	if uvu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   uservoucher.UserTable,
			Columns: []string{uservoucher.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uvu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   uservoucher.UserTable,
			Columns: []string{uservoucher.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uvu.mutation.DiscountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   uservoucher.DiscountTable,
			Columns: []string{uservoucher.DiscountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uvu.mutation.DiscountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   uservoucher.DiscountTable,
			Columns: []string{uservoucher.DiscountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uservoucher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uvu.mutation.done = true
	return n, nil
}

// UserVoucherUpdateOne is the builder for updating a single UserVoucher entity.
type UserVoucherUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserVoucherMutation
}

// SetIsUsed sets the "is_used" field.
func (uvuo *UserVoucherUpdateOne) SetIsUsed(b bool) *UserVoucherUpdateOne {
	uvuo.mutation.SetIsUsed(b)
	return uvuo
}

// SetNillableIsUsed sets the "is_used" field if the given value is not nil.
func (uvuo *UserVoucherUpdateOne) SetNillableIsUsed(b *bool) *UserVoucherUpdateOne {
	if b != nil {
		uvuo.SetIsUsed(*b)
	}
	return uvuo
}

// SetUsedAt sets the "used_at" field.
func (uvuo *UserVoucherUpdateOne) SetUsedAt(t time.Time) *UserVoucherUpdateOne {
	uvuo.mutation.SetUsedAt(t)
	return uvuo
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (uvuo *UserVoucherUpdateOne) SetNillableUsedAt(t *time.Time) *UserVoucherUpdateOne {
	if t != nil {
		uvuo.SetUsedAt(*t)
	}
	return uvuo
}

// ClearUsedAt clears the value of the "used_at" field.
func (uvuo *UserVoucherUpdateOne) ClearUsedAt() *UserVoucherUpdateOne {
	uvuo.mutation.ClearUsedAt()
	return uvuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uvuo *UserVoucherUpdateOne) SetUserID(id uint64) *UserVoucherUpdateOne {
	uvuo.mutation.SetUserID(id)
	return uvuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (uvuo *UserVoucherUpdateOne) SetNillableUserID(id *uint64) *UserVoucherUpdateOne {
	if id != nil {
		uvuo = uvuo.SetUserID(*id)
	}
	return uvuo
}

// SetUser sets the "user" edge to the User entity.
func (uvuo *UserVoucherUpdateOne) SetUser(u *User) *UserVoucherUpdateOne {
	return uvuo.SetUserID(u.ID)
}

// SetDiscountID sets the "discount" edge to the Discount entity by ID.
func (uvuo *UserVoucherUpdateOne) SetDiscountID(id uint64) *UserVoucherUpdateOne {
	uvuo.mutation.SetDiscountID(id)
	return uvuo
}

// SetNillableDiscountID sets the "discount" edge to the Discount entity by ID if the given value is not nil.
func (uvuo *UserVoucherUpdateOne) SetNillableDiscountID(id *uint64) *UserVoucherUpdateOne {
	if id != nil {
		uvuo = uvuo.SetDiscountID(*id)
	}
	return uvuo
}

// SetDiscount sets the "discount" edge to the Discount entity.
func (uvuo *UserVoucherUpdateOne) SetDiscount(d *Discount) *UserVoucherUpdateOne {
	return uvuo.SetDiscountID(d.ID)
}

// Mutation returns the UserVoucherMutation object of the builder.
func (uvuo *UserVoucherUpdateOne) Mutation() *UserVoucherMutation {
	return uvuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uvuo *UserVoucherUpdateOne) ClearUser() *UserVoucherUpdateOne {
	uvuo.mutation.ClearUser()
	return uvuo
}

// ClearDiscount clears the "discount" edge to the Discount entity.
func (uvuo *UserVoucherUpdateOne) ClearDiscount() *UserVoucherUpdateOne {
	uvuo.mutation.ClearDiscount()
	return uvuo
}

// Where appends a list predicates to the UserVoucherUpdate builder.
func (uvuo *UserVoucherUpdateOne) Where(ps ...predicate.UserVoucher) *UserVoucherUpdateOne {
	uvuo.mutation.Where(ps...)
	return uvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uvuo *UserVoucherUpdateOne) Select(field string, fields ...string) *UserVoucherUpdateOne {
	uvuo.fields = append([]string{field}, fields...)
	return uvuo
}

// Save executes the query and returns the updated UserVoucher entity.
func (uvuo *UserVoucherUpdateOne) Save(ctx context.Context) (*UserVoucher, error) {
	return withHooks(ctx, uvuo.sqlSave, uvuo.mutation, uvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uvuo *UserVoucherUpdateOne) SaveX(ctx context.Context) *UserVoucher {
	node, err := uvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uvuo *UserVoucherUpdateOne) Exec(ctx context.Context) error {
	_, err := uvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvuo *UserVoucherUpdateOne) ExecX(ctx context.Context) {
	if err := uvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uvuo *UserVoucherUpdateOne) sqlSave(ctx context.Context) (_node *UserVoucher, err error) {
	_spec := sqlgraph.NewUpdateSpec(uservoucher.Table, uservoucher.Columns, sqlgraph.NewFieldSpec(uservoucher.FieldID, field.TypeUint64))
	id, ok := uvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "UserVoucher.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, uservoucher.FieldID)
		for _, f := range fields {
			if !uservoucher.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != uservoucher.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uvuo.mutation.IsUsed(); ok {
		_spec.SetField(uservoucher.FieldIsUsed, field.TypeBool, value)
	}
	if value, ok := uvuo.mutation.UsedAt(); ok {
		_spec.SetField(uservoucher.FieldUsedAt, field.TypeTime, value)
	}
	if uvuo.mutation.UsedAtCleared() {
		_spec.ClearField(uservoucher.FieldUsedAt, field.TypeTime)
	}
	if uvuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   uservoucher.UserTable,
			Columns: []string{uservoucher.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uvuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   uservoucher.UserTable,
			Columns: []string{uservoucher.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uvuo.mutation.DiscountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   uservoucher.DiscountTable,
			Columns: []string{uservoucher.DiscountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uvuo.mutation.DiscountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   uservoucher.DiscountTable,
			Columns: []string{uservoucher.DiscountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserVoucher{config: uvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uservoucher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uvuo.mutation.done = true
	return _node, nil
}
