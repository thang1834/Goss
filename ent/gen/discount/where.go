// Code generated by ent, DO NOT EDIT.

package discount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/thang1834/go-goss/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldID, id))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldCode, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldDescription, v))
}

// DiscountType applies equality check predicate on the "discount_type" field. It's identical to DiscountTypeEQ.
func DiscountType(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldDiscountType, v))
}

// DiscountValue applies equality check predicate on the "discount_value" field. It's identical to DiscountValueEQ.
func DiscountValue(v float64) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldDiscountValue, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldEndDate, v))
}

// UsageLimit applies equality check predicate on the "usage_limit" field. It's identical to UsageLimitEQ.
func UsageLimit(v int) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldUsageLimit, v))
}

// UsageCount applies equality check predicate on the "usage_count" field. It's identical to UsageCountEQ.
func UsageCount(v int) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldUsageCount, v))
}

// MinOrderValue applies equality check predicate on the "min_order_value" field. It's identical to MinOrderValueEQ.
func MinOrderValue(v int) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldMinOrderValue, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldUpdatedAt, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContainsFold(FieldCode, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Discount {
	return predicate.Discount(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Discount {
	return predicate.Discount(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContainsFold(FieldDescription, v))
}

// DiscountTypeEQ applies the EQ predicate on the "discount_type" field.
func DiscountTypeEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldDiscountType, v))
}

// DiscountTypeNEQ applies the NEQ predicate on the "discount_type" field.
func DiscountTypeNEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldDiscountType, v))
}

// DiscountTypeIn applies the In predicate on the "discount_type" field.
func DiscountTypeIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldDiscountType, vs...))
}

// DiscountTypeNotIn applies the NotIn predicate on the "discount_type" field.
func DiscountTypeNotIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldDiscountType, vs...))
}

// DiscountTypeGT applies the GT predicate on the "discount_type" field.
func DiscountTypeGT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldDiscountType, v))
}

// DiscountTypeGTE applies the GTE predicate on the "discount_type" field.
func DiscountTypeGTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldDiscountType, v))
}

// DiscountTypeLT applies the LT predicate on the "discount_type" field.
func DiscountTypeLT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldDiscountType, v))
}

// DiscountTypeLTE applies the LTE predicate on the "discount_type" field.
func DiscountTypeLTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldDiscountType, v))
}

// DiscountTypeContains applies the Contains predicate on the "discount_type" field.
func DiscountTypeContains(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContains(FieldDiscountType, v))
}

// DiscountTypeHasPrefix applies the HasPrefix predicate on the "discount_type" field.
func DiscountTypeHasPrefix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasPrefix(FieldDiscountType, v))
}

// DiscountTypeHasSuffix applies the HasSuffix predicate on the "discount_type" field.
func DiscountTypeHasSuffix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasSuffix(FieldDiscountType, v))
}

// DiscountTypeEqualFold applies the EqualFold predicate on the "discount_type" field.
func DiscountTypeEqualFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEqualFold(FieldDiscountType, v))
}

// DiscountTypeContainsFold applies the ContainsFold predicate on the "discount_type" field.
func DiscountTypeContainsFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContainsFold(FieldDiscountType, v))
}

// DiscountValueEQ applies the EQ predicate on the "discount_value" field.
func DiscountValueEQ(v float64) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldDiscountValue, v))
}

// DiscountValueNEQ applies the NEQ predicate on the "discount_value" field.
func DiscountValueNEQ(v float64) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldDiscountValue, v))
}

// DiscountValueIn applies the In predicate on the "discount_value" field.
func DiscountValueIn(vs ...float64) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldDiscountValue, vs...))
}

// DiscountValueNotIn applies the NotIn predicate on the "discount_value" field.
func DiscountValueNotIn(vs ...float64) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldDiscountValue, vs...))
}

// DiscountValueGT applies the GT predicate on the "discount_value" field.
func DiscountValueGT(v float64) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldDiscountValue, v))
}

// DiscountValueGTE applies the GTE predicate on the "discount_value" field.
func DiscountValueGTE(v float64) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldDiscountValue, v))
}

// DiscountValueLT applies the LT predicate on the "discount_value" field.
func DiscountValueLT(v float64) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldDiscountValue, v))
}

// DiscountValueLTE applies the LTE predicate on the "discount_value" field.
func DiscountValueLTE(v float64) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldDiscountValue, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldEndDate, v))
}

// UsageLimitEQ applies the EQ predicate on the "usage_limit" field.
func UsageLimitEQ(v int) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldUsageLimit, v))
}

// UsageLimitNEQ applies the NEQ predicate on the "usage_limit" field.
func UsageLimitNEQ(v int) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldUsageLimit, v))
}

// UsageLimitIn applies the In predicate on the "usage_limit" field.
func UsageLimitIn(vs ...int) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldUsageLimit, vs...))
}

// UsageLimitNotIn applies the NotIn predicate on the "usage_limit" field.
func UsageLimitNotIn(vs ...int) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldUsageLimit, vs...))
}

// UsageLimitGT applies the GT predicate on the "usage_limit" field.
func UsageLimitGT(v int) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldUsageLimit, v))
}

// UsageLimitGTE applies the GTE predicate on the "usage_limit" field.
func UsageLimitGTE(v int) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldUsageLimit, v))
}

// UsageLimitLT applies the LT predicate on the "usage_limit" field.
func UsageLimitLT(v int) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldUsageLimit, v))
}

// UsageLimitLTE applies the LTE predicate on the "usage_limit" field.
func UsageLimitLTE(v int) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldUsageLimit, v))
}

// UsageLimitIsNil applies the IsNil predicate on the "usage_limit" field.
func UsageLimitIsNil() predicate.Discount {
	return predicate.Discount(sql.FieldIsNull(FieldUsageLimit))
}

// UsageLimitNotNil applies the NotNil predicate on the "usage_limit" field.
func UsageLimitNotNil() predicate.Discount {
	return predicate.Discount(sql.FieldNotNull(FieldUsageLimit))
}

// UsageCountEQ applies the EQ predicate on the "usage_count" field.
func UsageCountEQ(v int) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldUsageCount, v))
}

// UsageCountNEQ applies the NEQ predicate on the "usage_count" field.
func UsageCountNEQ(v int) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldUsageCount, v))
}

// UsageCountIn applies the In predicate on the "usage_count" field.
func UsageCountIn(vs ...int) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldUsageCount, vs...))
}

// UsageCountNotIn applies the NotIn predicate on the "usage_count" field.
func UsageCountNotIn(vs ...int) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldUsageCount, vs...))
}

// UsageCountGT applies the GT predicate on the "usage_count" field.
func UsageCountGT(v int) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldUsageCount, v))
}

// UsageCountGTE applies the GTE predicate on the "usage_count" field.
func UsageCountGTE(v int) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldUsageCount, v))
}

// UsageCountLT applies the LT predicate on the "usage_count" field.
func UsageCountLT(v int) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldUsageCount, v))
}

// UsageCountLTE applies the LTE predicate on the "usage_count" field.
func UsageCountLTE(v int) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldUsageCount, v))
}

// MinOrderValueEQ applies the EQ predicate on the "min_order_value" field.
func MinOrderValueEQ(v int) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldMinOrderValue, v))
}

// MinOrderValueNEQ applies the NEQ predicate on the "min_order_value" field.
func MinOrderValueNEQ(v int) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldMinOrderValue, v))
}

// MinOrderValueIn applies the In predicate on the "min_order_value" field.
func MinOrderValueIn(vs ...int) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldMinOrderValue, vs...))
}

// MinOrderValueNotIn applies the NotIn predicate on the "min_order_value" field.
func MinOrderValueNotIn(vs ...int) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldMinOrderValue, vs...))
}

// MinOrderValueGT applies the GT predicate on the "min_order_value" field.
func MinOrderValueGT(v int) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldMinOrderValue, v))
}

// MinOrderValueGTE applies the GTE predicate on the "min_order_value" field.
func MinOrderValueGTE(v int) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldMinOrderValue, v))
}

// MinOrderValueLT applies the LT predicate on the "min_order_value" field.
func MinOrderValueLT(v int) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldMinOrderValue, v))
}

// MinOrderValueLTE applies the LTE predicate on the "min_order_value" field.
func MinOrderValueLTE(v int) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldMinOrderValue, v))
}

// MinOrderValueIsNil applies the IsNil predicate on the "min_order_value" field.
func MinOrderValueIsNil() predicate.Discount {
	return predicate.Discount(sql.FieldIsNull(FieldMinOrderValue))
}

// MinOrderValueNotNil applies the NotNil predicate on the "min_order_value" field.
func MinOrderValueNotNil() predicate.Discount {
	return predicate.Discount(sql.FieldNotNull(FieldMinOrderValue))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProducts applies the HasEdge predicate on the "products" edge.
func HasProducts() predicate.Discount {
	return predicate.Discount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsWith applies the HasEdge predicate on the "products" edge with a given conditions (other predicates).
func HasProductsWith(preds ...predicate.DiscountProduct) predicate.Discount {
	return predicate.Discount(func(s *sql.Selector) {
		step := newProductsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategories applies the HasEdge predicate on the "categories" edge.
func HasCategories() predicate.Discount {
	return predicate.Discount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CategoriesTable, CategoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoriesWith applies the HasEdge predicate on the "categories" edge with a given conditions (other predicates).
func HasCategoriesWith(preds ...predicate.DiscountCategory) predicate.Discount {
	return predicate.Discount(func(s *sql.Selector) {
		step := newCategoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserVouchers applies the HasEdge predicate on the "user_vouchers" edge.
func HasUserVouchers() predicate.Discount {
	return predicate.Discount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserVouchersTable, UserVouchersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserVouchersWith applies the HasEdge predicate on the "user_vouchers" edge with a given conditions (other predicates).
func HasUserVouchersWith(preds ...predicate.UserVoucher) predicate.Discount {
	return predicate.Discount(func(s *sql.Selector) {
		step := newUserVouchersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Discount) predicate.Discount {
	return predicate.Discount(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Discount) predicate.Discount {
	return predicate.Discount(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Discount) predicate.Discount {
	return predicate.Discount(sql.NotPredicates(p))
}
