// Code generated by ent, DO NOT EDIT.

package discount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the discount type in the database.
	Label = "discount"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDiscountType holds the string denoting the discount_type field in the database.
	FieldDiscountType = "discount_type"
	// FieldDiscountValue holds the string denoting the discount_value field in the database.
	FieldDiscountValue = "discount_value"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldUsageLimit holds the string denoting the usage_limit field in the database.
	FieldUsageLimit = "usage_limit"
	// FieldUsageCount holds the string denoting the usage_count field in the database.
	FieldUsageCount = "usage_count"
	// FieldMinOrderValue holds the string denoting the min_order_value field in the database.
	FieldMinOrderValue = "min_order_value"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// EdgeCategories holds the string denoting the categories edge name in mutations.
	EdgeCategories = "categories"
	// EdgeUserVouchers holds the string denoting the user_vouchers edge name in mutations.
	EdgeUserVouchers = "user_vouchers"
	// Table holds the table name of the discount in the database.
	Table = "discounts"
	// ProductsTable is the table that holds the products relation/edge.
	ProductsTable = "discount_products"
	// ProductsInverseTable is the table name for the DiscountProduct entity.
	// It exists in this package in order to avoid circular dependency with the "discountproduct" package.
	ProductsInverseTable = "discount_products"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "discount_products"
	// CategoriesTable is the table that holds the categories relation/edge.
	CategoriesTable = "discount_categories"
	// CategoriesInverseTable is the table name for the DiscountCategory entity.
	// It exists in this package in order to avoid circular dependency with the "discountcategory" package.
	CategoriesInverseTable = "discount_categories"
	// CategoriesColumn is the table column denoting the categories relation/edge.
	CategoriesColumn = "discount_categories"
	// UserVouchersTable is the table that holds the user_vouchers relation/edge.
	UserVouchersTable = "user_vouchers"
	// UserVouchersInverseTable is the table name for the UserVoucher entity.
	// It exists in this package in order to avoid circular dependency with the "uservoucher" package.
	UserVouchersInverseTable = "user_vouchers"
	// UserVouchersColumn is the table column denoting the user_vouchers relation/edge.
	UserVouchersColumn = "discount_user_vouchers"
)

// Columns holds all SQL columns for discount fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldDescription,
	FieldDiscountType,
	FieldDiscountValue,
	FieldStartDate,
	FieldEndDate,
	FieldUsageLimit,
	FieldUsageCount,
	FieldMinOrderValue,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUsageCount holds the default value on creation for the "usage_count" field.
	DefaultUsageCount int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Discount queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDiscountType orders the results by the discount_type field.
func ByDiscountType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountType, opts...).ToFunc()
}

// ByDiscountValue orders the results by the discount_value field.
func ByDiscountValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountValue, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByUsageLimit orders the results by the usage_limit field.
func ByUsageLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageLimit, opts...).ToFunc()
}

// ByUsageCount orders the results by the usage_count field.
func ByUsageCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageCount, opts...).ToFunc()
}

// ByMinOrderValue orders the results by the min_order_value field.
func ByMinOrderValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinOrderValue, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProductsCount orders the results by products count.
func ByProductsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductsStep(), opts...)
	}
}

// ByProducts orders the results by products terms.
func ByProducts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCategoriesCount orders the results by categories count.
func ByCategoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCategoriesStep(), opts...)
	}
}

// ByCategories orders the results by categories terms.
func ByCategories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserVouchersCount orders the results by user_vouchers count.
func ByUserVouchersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserVouchersStep(), opts...)
	}
}

// ByUserVouchers orders the results by user_vouchers terms.
func ByUserVouchers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserVouchersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
	)
}
func newCategoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CategoriesTable, CategoriesColumn),
	)
}
func newUserVouchersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserVouchersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserVouchersTable, UserVouchersColumn),
	)
}
