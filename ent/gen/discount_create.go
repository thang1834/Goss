// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/discount"
	"github.com/thang1834/go-goss/ent/gen/discountcategory"
	"github.com/thang1834/go-goss/ent/gen/discountproduct"
	"github.com/thang1834/go-goss/ent/gen/uservoucher"
)

// DiscountCreate is the builder for creating a Discount entity.
type DiscountCreate struct {
	config
	mutation *DiscountMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (dc *DiscountCreate) SetCode(s string) *DiscountCreate {
	dc.mutation.SetCode(s)
	return dc
}

// SetDescription sets the "description" field.
func (dc *DiscountCreate) SetDescription(s string) *DiscountCreate {
	dc.mutation.SetDescription(s)
	return dc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableDescription(s *string) *DiscountCreate {
	if s != nil {
		dc.SetDescription(*s)
	}
	return dc
}

// SetDiscountType sets the "discount_type" field.
func (dc *DiscountCreate) SetDiscountType(s string) *DiscountCreate {
	dc.mutation.SetDiscountType(s)
	return dc
}

// SetDiscountValue sets the "discount_value" field.
func (dc *DiscountCreate) SetDiscountValue(f float64) *DiscountCreate {
	dc.mutation.SetDiscountValue(f)
	return dc
}

// SetStartDate sets the "start_date" field.
func (dc *DiscountCreate) SetStartDate(t time.Time) *DiscountCreate {
	dc.mutation.SetStartDate(t)
	return dc
}

// SetEndDate sets the "end_date" field.
func (dc *DiscountCreate) SetEndDate(t time.Time) *DiscountCreate {
	dc.mutation.SetEndDate(t)
	return dc
}

// SetUsageLimit sets the "usage_limit" field.
func (dc *DiscountCreate) SetUsageLimit(i int) *DiscountCreate {
	dc.mutation.SetUsageLimit(i)
	return dc
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableUsageLimit(i *int) *DiscountCreate {
	if i != nil {
		dc.SetUsageLimit(*i)
	}
	return dc
}

// SetUsageCount sets the "usage_count" field.
func (dc *DiscountCreate) SetUsageCount(i int) *DiscountCreate {
	dc.mutation.SetUsageCount(i)
	return dc
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableUsageCount(i *int) *DiscountCreate {
	if i != nil {
		dc.SetUsageCount(*i)
	}
	return dc
}

// SetMinOrderValue sets the "min_order_value" field.
func (dc *DiscountCreate) SetMinOrderValue(i int) *DiscountCreate {
	dc.mutation.SetMinOrderValue(i)
	return dc
}

// SetNillableMinOrderValue sets the "min_order_value" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableMinOrderValue(i *int) *DiscountCreate {
	if i != nil {
		dc.SetMinOrderValue(*i)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DiscountCreate) SetCreatedAt(t time.Time) *DiscountCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableCreatedAt(t *time.Time) *DiscountCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DiscountCreate) SetUpdatedAt(t time.Time) *DiscountCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableUpdatedAt(t *time.Time) *DiscountCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DiscountCreate) SetID(u uint64) *DiscountCreate {
	dc.mutation.SetID(u)
	return dc
}

// AddProductIDs adds the "products" edge to the DiscountProduct entity by IDs.
func (dc *DiscountCreate) AddProductIDs(ids ...int) *DiscountCreate {
	dc.mutation.AddProductIDs(ids...)
	return dc
}

// AddProducts adds the "products" edges to the DiscountProduct entity.
func (dc *DiscountCreate) AddProducts(d ...*DiscountProduct) *DiscountCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddProductIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the DiscountCategory entity by IDs.
func (dc *DiscountCreate) AddCategoryIDs(ids ...int) *DiscountCreate {
	dc.mutation.AddCategoryIDs(ids...)
	return dc
}

// AddCategories adds the "categories" edges to the DiscountCategory entity.
func (dc *DiscountCreate) AddCategories(d ...*DiscountCategory) *DiscountCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddCategoryIDs(ids...)
}

// AddUserVoucherIDs adds the "user_vouchers" edge to the UserVoucher entity by IDs.
func (dc *DiscountCreate) AddUserVoucherIDs(ids ...uint64) *DiscountCreate {
	dc.mutation.AddUserVoucherIDs(ids...)
	return dc
}

// AddUserVouchers adds the "user_vouchers" edges to the UserVoucher entity.
func (dc *DiscountCreate) AddUserVouchers(u ...*UserVoucher) *DiscountCreate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dc.AddUserVoucherIDs(ids...)
}

// Mutation returns the DiscountMutation object of the builder.
func (dc *DiscountCreate) Mutation() *DiscountMutation {
	return dc.mutation
}

// Save creates the Discount in the database.
func (dc *DiscountCreate) Save(ctx context.Context) (*Discount, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DiscountCreate) SaveX(ctx context.Context) *Discount {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DiscountCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DiscountCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DiscountCreate) defaults() {
	if _, ok := dc.mutation.UsageCount(); !ok {
		v := discount.DefaultUsageCount
		dc.mutation.SetUsageCount(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := discount.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := discount.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DiscountCreate) check() error {
	if _, ok := dc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`gen: missing required field "Discount.code"`)}
	}
	if _, ok := dc.mutation.DiscountType(); !ok {
		return &ValidationError{Name: "discount_type", err: errors.New(`gen: missing required field "Discount.discount_type"`)}
	}
	if _, ok := dc.mutation.DiscountValue(); !ok {
		return &ValidationError{Name: "discount_value", err: errors.New(`gen: missing required field "Discount.discount_value"`)}
	}
	if _, ok := dc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`gen: missing required field "Discount.start_date"`)}
	}
	if _, ok := dc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`gen: missing required field "Discount.end_date"`)}
	}
	if _, ok := dc.mutation.UsageCount(); !ok {
		return &ValidationError{Name: "usage_count", err: errors.New(`gen: missing required field "Discount.usage_count"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Discount.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Discount.updated_at"`)}
	}
	return nil
}

func (dc *DiscountCreate) sqlSave(ctx context.Context) (*Discount, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DiscountCreate) createSpec() (*Discount, *sqlgraph.CreateSpec) {
	var (
		_node = &Discount{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(discount.Table, sqlgraph.NewFieldSpec(discount.FieldID, field.TypeUint64))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Code(); ok {
		_spec.SetField(discount.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := dc.mutation.Description(); ok {
		_spec.SetField(discount.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := dc.mutation.DiscountType(); ok {
		_spec.SetField(discount.FieldDiscountType, field.TypeString, value)
		_node.DiscountType = value
	}
	if value, ok := dc.mutation.DiscountValue(); ok {
		_spec.SetField(discount.FieldDiscountValue, field.TypeFloat64, value)
		_node.DiscountValue = value
	}
	if value, ok := dc.mutation.StartDate(); ok {
		_spec.SetField(discount.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := dc.mutation.EndDate(); ok {
		_spec.SetField(discount.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := dc.mutation.UsageLimit(); ok {
		_spec.SetField(discount.FieldUsageLimit, field.TypeInt, value)
		_node.UsageLimit = value
	}
	if value, ok := dc.mutation.UsageCount(); ok {
		_spec.SetField(discount.FieldUsageCount, field.TypeInt, value)
		_node.UsageCount = value
	}
	if value, ok := dc.mutation.MinOrderValue(); ok {
		_spec.SetField(discount.FieldMinOrderValue, field.TypeInt, value)
		_node.MinOrderValue = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(discount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(discount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := dc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.ProductsTable,
			Columns: []string{discount.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.CategoriesTable,
			Columns: []string{discount.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discountcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.UserVouchersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discount.UserVouchersTable,
			Columns: []string{discount.UserVouchersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uservoucher.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DiscountCreateBulk is the builder for creating many Discount entities in bulk.
type DiscountCreateBulk struct {
	config
	err      error
	builders []*DiscountCreate
}

// Save creates the Discount entities in the database.
func (dcb *DiscountCreateBulk) Save(ctx context.Context) ([]*Discount, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Discount, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DiscountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DiscountCreateBulk) SaveX(ctx context.Context) []*Discount {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DiscountCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DiscountCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
