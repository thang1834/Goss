// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thang1834/go-goss/ent/gen/predicate"
	"github.com/thang1834/go-goss/ent/gen/product"
	"github.com/thang1834/go-goss/ent/gen/productimage"
)

// ProductImageUpdate is the builder for updating ProductImage entities.
type ProductImageUpdate struct {
	config
	hooks    []Hook
	mutation *ProductImageMutation
}

// Where appends a list predicates to the ProductImageUpdate builder.
func (piu *ProductImageUpdate) Where(ps ...predicate.ProductImage) *ProductImageUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetImageURL sets the "image_url" field.
func (piu *ProductImageUpdate) SetImageURL(s string) *ProductImageUpdate {
	piu.mutation.SetImageURL(s)
	return piu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (piu *ProductImageUpdate) SetNillableImageURL(s *string) *ProductImageUpdate {
	if s != nil {
		piu.SetImageURL(*s)
	}
	return piu
}

// SetIsPrimary sets the "is_primary" field.
func (piu *ProductImageUpdate) SetIsPrimary(b bool) *ProductImageUpdate {
	piu.mutation.SetIsPrimary(b)
	return piu
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (piu *ProductImageUpdate) SetNillableIsPrimary(b *bool) *ProductImageUpdate {
	if b != nil {
		piu.SetIsPrimary(*b)
	}
	return piu
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (piu *ProductImageUpdate) SetProductID(id uint64) *ProductImageUpdate {
	piu.mutation.SetProductID(id)
	return piu
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (piu *ProductImageUpdate) SetNillableProductID(id *uint64) *ProductImageUpdate {
	if id != nil {
		piu = piu.SetProductID(*id)
	}
	return piu
}

// SetProduct sets the "product" edge to the Product entity.
func (piu *ProductImageUpdate) SetProduct(p *Product) *ProductImageUpdate {
	return piu.SetProductID(p.ID)
}

// Mutation returns the ProductImageMutation object of the builder.
func (piu *ProductImageUpdate) Mutation() *ProductImageMutation {
	return piu.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (piu *ProductImageUpdate) ClearProduct() *ProductImageUpdate {
	piu.mutation.ClearProduct()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProductImageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProductImageUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProductImageUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProductImageUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piu *ProductImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productimage.Table, productimage.Columns, sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeUint64))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.ImageURL(); ok {
		_spec.SetField(productimage.FieldImageURL, field.TypeString, value)
	}
	if value, ok := piu.mutation.IsPrimary(); ok {
		_spec.SetField(productimage.FieldIsPrimary, field.TypeBool, value)
	}
	if piu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productimage.ProductTable,
			Columns: []string{productimage.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productimage.ProductTable,
			Columns: []string{productimage.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// ProductImageUpdateOne is the builder for updating a single ProductImage entity.
type ProductImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductImageMutation
}

// SetImageURL sets the "image_url" field.
func (piuo *ProductImageUpdateOne) SetImageURL(s string) *ProductImageUpdateOne {
	piuo.mutation.SetImageURL(s)
	return piuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (piuo *ProductImageUpdateOne) SetNillableImageURL(s *string) *ProductImageUpdateOne {
	if s != nil {
		piuo.SetImageURL(*s)
	}
	return piuo
}

// SetIsPrimary sets the "is_primary" field.
func (piuo *ProductImageUpdateOne) SetIsPrimary(b bool) *ProductImageUpdateOne {
	piuo.mutation.SetIsPrimary(b)
	return piuo
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (piuo *ProductImageUpdateOne) SetNillableIsPrimary(b *bool) *ProductImageUpdateOne {
	if b != nil {
		piuo.SetIsPrimary(*b)
	}
	return piuo
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (piuo *ProductImageUpdateOne) SetProductID(id uint64) *ProductImageUpdateOne {
	piuo.mutation.SetProductID(id)
	return piuo
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (piuo *ProductImageUpdateOne) SetNillableProductID(id *uint64) *ProductImageUpdateOne {
	if id != nil {
		piuo = piuo.SetProductID(*id)
	}
	return piuo
}

// SetProduct sets the "product" edge to the Product entity.
func (piuo *ProductImageUpdateOne) SetProduct(p *Product) *ProductImageUpdateOne {
	return piuo.SetProductID(p.ID)
}

// Mutation returns the ProductImageMutation object of the builder.
func (piuo *ProductImageUpdateOne) Mutation() *ProductImageMutation {
	return piuo.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (piuo *ProductImageUpdateOne) ClearProduct() *ProductImageUpdateOne {
	piuo.mutation.ClearProduct()
	return piuo
}

// Where appends a list predicates to the ProductImageUpdate builder.
func (piuo *ProductImageUpdateOne) Where(ps ...predicate.ProductImage) *ProductImageUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProductImageUpdateOne) Select(field string, fields ...string) *ProductImageUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProductImage entity.
func (piuo *ProductImageUpdateOne) Save(ctx context.Context) (*ProductImage, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProductImageUpdateOne) SaveX(ctx context.Context) *ProductImage {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProductImageUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProductImageUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piuo *ProductImageUpdateOne) sqlSave(ctx context.Context) (_node *ProductImage, err error) {
	_spec := sqlgraph.NewUpdateSpec(productimage.Table, productimage.Columns, sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeUint64))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "ProductImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productimage.FieldID)
		for _, f := range fields {
			if !productimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != productimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.ImageURL(); ok {
		_spec.SetField(productimage.FieldImageURL, field.TypeString, value)
	}
	if value, ok := piuo.mutation.IsPrimary(); ok {
		_spec.SetField(productimage.FieldIsPrimary, field.TypeBool, value)
	}
	if piuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productimage.ProductTable,
			Columns: []string{productimage.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productimage.ProductTable,
			Columns: []string{productimage.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductImage{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
