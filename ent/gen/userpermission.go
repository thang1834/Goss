// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/thang1834/go-goss/ent/gen/permission"
	"github.com/thang1834/go-goss/ent/gen/user"
	"github.com/thang1834/go-goss/ent/gen/userpermission"
)

// UserPermission is the model entity for the UserPermission schema.
type UserPermission struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// PermissionID holds the value of the "permission_id" field.
	PermissionID uint64 `json:"permission_id,omitempty"`
	// GrantedBy holds the value of the "granted_by" field.
	GrantedBy uint64 `json:"granted_by,omitempty"`
	// GrantedAt holds the value of the "granted_at" field.
	GrantedAt time.Time `json:"granted_at,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPermissionQuery when eager-loading is set.
	Edges        UserPermissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserPermissionEdges holds the relations/edges for other nodes in the graph.
type UserPermissionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Permission holds the value of the permission edge.
	Permission *Permission `json:"permission,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPermissionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PermissionOrErr returns the Permission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPermissionEdges) PermissionOrErr() (*Permission, error) {
	if e.Permission != nil {
		return e.Permission, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: permission.Label}
	}
	return nil, &NotLoadedError{edge: "permission"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPermission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userpermission.FieldIsActive:
			values[i] = new(sql.NullBool)
		case userpermission.FieldID, userpermission.FieldUserID, userpermission.FieldPermissionID, userpermission.FieldGrantedBy:
			values[i] = new(sql.NullInt64)
		case userpermission.FieldGrantedAt, userpermission.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPermission fields.
func (up *UserPermission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userpermission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			up.ID = uint64(value.Int64)
		case userpermission.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				up.UserID = uint64(value.Int64)
			}
		case userpermission.FieldPermissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field permission_id", values[i])
			} else if value.Valid {
				up.PermissionID = uint64(value.Int64)
			}
		case userpermission.FieldGrantedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field granted_by", values[i])
			} else if value.Valid {
				up.GrantedBy = uint64(value.Int64)
			}
		case userpermission.FieldGrantedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field granted_at", values[i])
			} else if value.Valid {
				up.GrantedAt = value.Time
			}
		case userpermission.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				up.ExpiresAt = value.Time
			}
		case userpermission.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				up.IsActive = value.Bool
			}
		default:
			up.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserPermission.
// This includes values selected through modifiers, order, etc.
func (up *UserPermission) Value(name string) (ent.Value, error) {
	return up.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserPermission entity.
func (up *UserPermission) QueryUser() *UserQuery {
	return NewUserPermissionClient(up.config).QueryUser(up)
}

// QueryPermission queries the "permission" edge of the UserPermission entity.
func (up *UserPermission) QueryPermission() *PermissionQuery {
	return NewUserPermissionClient(up.config).QueryPermission(up)
}

// Update returns a builder for updating this UserPermission.
// Note that you need to call UserPermission.Unwrap() before calling this method if this UserPermission
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserPermission) Update() *UserPermissionUpdateOne {
	return NewUserPermissionClient(up.config).UpdateOne(up)
}

// Unwrap unwraps the UserPermission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserPermission) Unwrap() *UserPermission {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("gen: UserPermission is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserPermission) String() string {
	var builder strings.Builder
	builder.WriteString("UserPermission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", up.UserID))
	builder.WriteString(", ")
	builder.WriteString("permission_id=")
	builder.WriteString(fmt.Sprintf("%v", up.PermissionID))
	builder.WriteString(", ")
	builder.WriteString("granted_by=")
	builder.WriteString(fmt.Sprintf("%v", up.GrantedBy))
	builder.WriteString(", ")
	builder.WriteString("granted_at=")
	builder.WriteString(up.GrantedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(up.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", up.IsActive))
	builder.WriteByte(')')
	return builder.String()
}

// UserPermissions is a parsable slice of UserPermission.
type UserPermissions []*UserPermission
