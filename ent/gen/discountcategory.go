// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/thang1834/go-goss/ent/gen/category"
	"github.com/thang1834/go-goss/ent/gen/discount"
	"github.com/thang1834/go-goss/ent/gen/discountcategory"
)

// DiscountCategory is the model entity for the DiscountCategory schema.
type DiscountCategory struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscountCategoryQuery when eager-loading is set.
	Edges               DiscountCategoryEdges `json:"edges"`
	category_discounts  *uint64
	discount_categories *uint64
	selectValues        sql.SelectValues
}

// DiscountCategoryEdges holds the relations/edges for other nodes in the graph.
type DiscountCategoryEdges struct {
	// Discount holds the value of the discount edge.
	Discount *Discount `json:"discount,omitempty"`
	// Category holds the value of the category edge.
	Category *Category `json:"category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DiscountOrErr returns the Discount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscountCategoryEdges) DiscountOrErr() (*Discount, error) {
	if e.Discount != nil {
		return e.Discount, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: discount.Label}
	}
	return nil, &NotLoadedError{edge: "discount"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscountCategoryEdges) CategoryOrErr() (*Category, error) {
	if e.Category != nil {
		return e.Category, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: category.Label}
	}
	return nil, &NotLoadedError{edge: "category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiscountCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case discountcategory.FieldID:
			values[i] = new(sql.NullInt64)
		case discountcategory.ForeignKeys[0]: // category_discounts
			values[i] = new(sql.NullInt64)
		case discountcategory.ForeignKeys[1]: // discount_categories
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiscountCategory fields.
func (dc *DiscountCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discountcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dc.ID = int(value.Int64)
		case discountcategory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field category_discounts", value)
			} else if value.Valid {
				dc.category_discounts = new(uint64)
				*dc.category_discounts = uint64(value.Int64)
			}
		case discountcategory.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field discount_categories", value)
			} else if value.Valid {
				dc.discount_categories = new(uint64)
				*dc.discount_categories = uint64(value.Int64)
			}
		default:
			dc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DiscountCategory.
// This includes values selected through modifiers, order, etc.
func (dc *DiscountCategory) Value(name string) (ent.Value, error) {
	return dc.selectValues.Get(name)
}

// QueryDiscount queries the "discount" edge of the DiscountCategory entity.
func (dc *DiscountCategory) QueryDiscount() *DiscountQuery {
	return NewDiscountCategoryClient(dc.config).QueryDiscount(dc)
}

// QueryCategory queries the "category" edge of the DiscountCategory entity.
func (dc *DiscountCategory) QueryCategory() *CategoryQuery {
	return NewDiscountCategoryClient(dc.config).QueryCategory(dc)
}

// Update returns a builder for updating this DiscountCategory.
// Note that you need to call DiscountCategory.Unwrap() before calling this method if this DiscountCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (dc *DiscountCategory) Update() *DiscountCategoryUpdateOne {
	return NewDiscountCategoryClient(dc.config).UpdateOne(dc)
}

// Unwrap unwraps the DiscountCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dc *DiscountCategory) Unwrap() *DiscountCategory {
	_tx, ok := dc.config.driver.(*txDriver)
	if !ok {
		panic("gen: DiscountCategory is not a transactional entity")
	}
	dc.config.driver = _tx.drv
	return dc
}

// String implements the fmt.Stringer.
func (dc *DiscountCategory) String() string {
	var builder strings.Builder
	builder.WriteString("DiscountCategory(")
	builder.WriteString(fmt.Sprintf("id=%v", dc.ID))
	builder.WriteByte(')')
	return builder.String()
}

// DiscountCategories is a parsable slice of DiscountCategory.
type DiscountCategories []*DiscountCategory
