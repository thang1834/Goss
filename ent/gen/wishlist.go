// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/thang1834/go-goss/ent/gen/user"
	"github.com/thang1834/go-goss/ent/gen/wishlist"
)

// Wishlist is the model entity for the Wishlist schema.
type Wishlist struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WishlistQuery when eager-loading is set.
	Edges          WishlistEdges `json:"edges"`
	user_wishlists *uint64
	selectValues   sql.SelectValues
}

// WishlistEdges holds the relations/edges for other nodes in the graph.
type WishlistEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Items holds the value of the items edge.
	Items []*WishlistItem `json:"items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WishlistEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e WishlistEdges) ItemsOrErr() ([]*WishlistItem, error) {
	if e.loadedTypes[1] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Wishlist) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case wishlist.FieldID:
			values[i] = new(sql.NullInt64)
		case wishlist.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case wishlist.ForeignKeys[0]: // user_wishlists
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Wishlist fields.
func (w *Wishlist) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wishlist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = uint64(value.Int64)
		case wishlist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case wishlist.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_wishlists", value)
			} else if value.Valid {
				w.user_wishlists = new(uint64)
				*w.user_wishlists = uint64(value.Int64)
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Wishlist.
// This includes values selected through modifiers, order, etc.
func (w *Wishlist) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Wishlist entity.
func (w *Wishlist) QueryUser() *UserQuery {
	return NewWishlistClient(w.config).QueryUser(w)
}

// QueryItems queries the "items" edge of the Wishlist entity.
func (w *Wishlist) QueryItems() *WishlistItemQuery {
	return NewWishlistClient(w.config).QueryItems(w)
}

// Update returns a builder for updating this Wishlist.
// Note that you need to call Wishlist.Unwrap() before calling this method if this Wishlist
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Wishlist) Update() *WishlistUpdateOne {
	return NewWishlistClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Wishlist entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Wishlist) Unwrap() *Wishlist {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("gen: Wishlist is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Wishlist) String() string {
	var builder strings.Builder
	builder.WriteString("Wishlist(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Wishlists is a parsable slice of Wishlist.
type Wishlists []*Wishlist
