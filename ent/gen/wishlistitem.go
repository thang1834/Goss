// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/thang1834/go-goss/ent/gen/product"
	"github.com/thang1834/go-goss/ent/gen/wishlist"
	"github.com/thang1834/go-goss/ent/gen/wishlistitem"
)

// WishlistItem is the model entity for the WishlistItem schema.
type WishlistItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AddedAt holds the value of the "added_at" field.
	AddedAt time.Time `json:"added_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WishlistItemQuery when eager-loading is set.
	Edges                  WishlistItemEdges `json:"edges"`
	product_wishlist_items *uint64
	wishlist_items         *uint64
	selectValues           sql.SelectValues
}

// WishlistItemEdges holds the relations/edges for other nodes in the graph.
type WishlistItemEdges struct {
	// Wishlist holds the value of the wishlist edge.
	Wishlist *Wishlist `json:"wishlist,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WishlistOrErr returns the Wishlist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WishlistItemEdges) WishlistOrErr() (*Wishlist, error) {
	if e.Wishlist != nil {
		return e.Wishlist, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: wishlist.Label}
	}
	return nil, &NotLoadedError{edge: "wishlist"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WishlistItemEdges) ProductOrErr() (*Product, error) {
	if e.Product != nil {
		return e.Product, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WishlistItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case wishlistitem.FieldID:
			values[i] = new(sql.NullInt64)
		case wishlistitem.FieldAddedAt:
			values[i] = new(sql.NullTime)
		case wishlistitem.ForeignKeys[0]: // product_wishlist_items
			values[i] = new(sql.NullInt64)
		case wishlistitem.ForeignKeys[1]: // wishlist_items
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WishlistItem fields.
func (wi *WishlistItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wishlistitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wi.ID = int(value.Int64)
		case wishlistitem.FieldAddedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field added_at", values[i])
			} else if value.Valid {
				wi.AddedAt = value.Time
			}
		case wishlistitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_wishlist_items", value)
			} else if value.Valid {
				wi.product_wishlist_items = new(uint64)
				*wi.product_wishlist_items = uint64(value.Int64)
			}
		case wishlistitem.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field wishlist_items", value)
			} else if value.Valid {
				wi.wishlist_items = new(uint64)
				*wi.wishlist_items = uint64(value.Int64)
			}
		default:
			wi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WishlistItem.
// This includes values selected through modifiers, order, etc.
func (wi *WishlistItem) Value(name string) (ent.Value, error) {
	return wi.selectValues.Get(name)
}

// QueryWishlist queries the "wishlist" edge of the WishlistItem entity.
func (wi *WishlistItem) QueryWishlist() *WishlistQuery {
	return NewWishlistItemClient(wi.config).QueryWishlist(wi)
}

// QueryProduct queries the "product" edge of the WishlistItem entity.
func (wi *WishlistItem) QueryProduct() *ProductQuery {
	return NewWishlistItemClient(wi.config).QueryProduct(wi)
}

// Update returns a builder for updating this WishlistItem.
// Note that you need to call WishlistItem.Unwrap() before calling this method if this WishlistItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (wi *WishlistItem) Update() *WishlistItemUpdateOne {
	return NewWishlistItemClient(wi.config).UpdateOne(wi)
}

// Unwrap unwraps the WishlistItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wi *WishlistItem) Unwrap() *WishlistItem {
	_tx, ok := wi.config.driver.(*txDriver)
	if !ok {
		panic("gen: WishlistItem is not a transactional entity")
	}
	wi.config.driver = _tx.drv
	return wi
}

// String implements the fmt.Stringer.
func (wi *WishlistItem) String() string {
	var builder strings.Builder
	builder.WriteString("WishlistItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wi.ID))
	builder.WriteString("added_at=")
	builder.WriteString(wi.AddedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WishlistItems is a parsable slice of WishlistItem.
type WishlistItems []*WishlistItem
